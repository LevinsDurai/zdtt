ZohoDeskEditor.create = function(a) {
    return "use strict", new ZohoDeskEditor(a)
}, ZohoDeskEditor.prototype.execCommand = function(a, b) {
    "use strict";
    var c = this,
        d, e, f = c.getContent();
    c._stopEvent(a);
    switch (b) {
        case "forecolor":
        case "backcolor":
        case "fontfamily":
        case "fontSize":
            c.showDropDown(a, b);
            break;
        case "strikethroguh":
            c.squireInstance.strikethrough();
            break;
        case "direction":
            c.showDropDown(a, b, "direction");
            break;
        case "rtl":
            c.squireInstance.setTextDirection(b);
            break;
        case "ltr":
            c.squireInstance.setTextDirection(b);
            break;
        case "alignoptions":
            c.showDropDown(a, b, "align");
            break;
        case "listoptions":
            c.showDropDown(a, b, "list");
            break;
        case "directionoptions":
            c.showDropDown(a, b, "textDir");
            break;
        case "indentoptions":
            c.showDropDown(a, b, "indent");
            break;
        case "otheroptions":
            c.showDropDown(a, b, "others");
            break;
        case "moreoptions":
            c.showDropDown(a, b, b);
            break;
        case "heading":
            c.showDropDown(a, b, "heading");
            break;
        case "toc":
            c.insertTOC(a, b);
            break;
        case "smiley":
            c.showDropDown(a, b);
            break;
        case "link":
            c.createLink(), ZohoDeskEditor_Init.needEditorStats && c.updateCount(b);
            break;
        case "articlelink":
            KbAddArticleLink.createPopUp();
            break;
        case "tableGrid":
            c._createTableGrid(a, b), ZohoDeskEditor_Init.needEditorStats && c.updateCount(b);
            break;
        case "image":
            c.uploadImage(), ZohoDeskEditor_Init.needEditorStats && c.updateCount(b);
            break;
        case "save":
            if (c.initobj.saveContent) {
                var g = c.doc,
                    h = "<html><head>" + g.getElementsByTagName("head")[0].innerHTML + "</head><body>" + g.body.innerHTML + "</body></html>";
                c.initobj.saveContent(h)
            }
            break;
        case "insertoptions":
            c.showDropDown(a, b, "insertoptions");
            break;
        case "quote":
            c.insertQuote(), ZohoDeskEditor_Init.needEditorStats && c.updateCount(b);
            break;
        case "more":
            c.expandToolbar(a);
            break;
        case "attach":
            c.showDropDown(a, "attach");
            break;
        case "spellcheck":
            d = a.target || a.srcElement, ZohoDeskEditor.hasClass(d, "zei-arrow") ? c.spellcheckOptions(a, b) : c.spellcheck(a);
            break;
        case "plaintext":
            c.updateOtheroptions(a.target, "plainText"), ZohoDeskEditor_Init.needEditorStats && c.updateCount(b);
            break;
        case "bold":
            var i = c.doc.queryCommandState("bold");
            i ? c.squireInstance.removeBold() : c.squireInstance.bold(), c.saveCurrentState(), c.updateToolbar();
            break;
        case "italic":
            var i = c.doc.queryCommandState("italic");
            i ? c.squireInstance.removeItalic() : c.squireInstance.italic(), c.saveCurrentState(), c.updateToolbar();
            break;
        case "underline":
            var i = c.doc.queryCommandState("underline");
            i ? c.squireInstance.removeUnderline() : c.squireInstance.underline(), c.saveCurrentState(), c.updateToolbar();
            break;
        case "j-left":
        case "j-right":
        case "j-center":
        case "j-full":
            c.squireInstance.setTextAlignment(b.split("-")[1]), c.saveCurrentState(), c.updateToolbar();
            break;
        case "insertorderedlist":
            c.insertListOperation("OL"), c.saveCurrentState();
            break;
        case "insertunorderedlist":
            c.insertListOperation("UL"), c.saveCurrentState();
            break;
        case "insertHTML":
            c.showInsertHTMLDialog();
            break;
        case "styletext":
            c.showDropDown(a, b);
            break;
        case "editorexpand":
            c.toggleEditorView();
            break;
        case "removeFormat":
            if (c._getSelectedText().trim().length) {
                var j, k = c.getContent();
                c.win.focus(), c.squireInstance.removeAllFormatting(null), c.removeStyleTextFormat(b), j = c.getContent(), j != k && c.saveCurrentState(), c.updateToolbar(), c.styletext && c.handleContentStyles()
            }
            break;
        default:
            c.doc.execCommand(b, !1, undefined), c.updateToolbar(), ZohoDeskEditor_Init.needEditorStats && c.updateCount(b)
    }
}, ZohoDeskEditor.prototype.toggleEditorView = function() {
    var a = this,
        b = document.getElementsByClassName("SolutionForm_OuterDiv")[0];
    if (b.classList.contains("KB_Editor_FullView")) {
        b.classList.remove("KB_Editor_FullView"), a.trackeditorexpansion && a.trackeditorexpansion(!1), a.isExpanded = !1, a.toolbarobject.editorexpand.setAttribute("orgtitle", "Expanded view");
        var c = a.toolbardiv.getElementsByClassName("KB_Editor_common_DropDown");
        while (c[0]) c[0].parentNode.removeChild(c[0]);
        a.styletext && !a.isExpanded && a.handleContentStyles()
    } else a.trackeditorexpansion && a.trackeditorexpansion(!0), b.classList.add("KB_Editor_FullView"), a.isExpanded = !0, a.toolbarobject.editorexpand.setAttribute("orgtitle", "Normal view"), a.styletext && a.handleContentStyles()
}, ZohoDeskEditor.prototype.removeStyleTextFormat = function() {
    var a = this,
        b = a.doc,
        c = b.getSelection(),
        d = c.valueOf().toString(),
        e = c.getRangeAt(0),
        f = undefined;
    f = e.commonAncestorContainer, frag = b.createDocumentFragment();
    if (f.nodeName !== "BODY") {
        var g = !0,
            h = function(a) {
                if (a.nodeName.toLowerCase().indexOf("h") === 0) {
                    var c = b.createElement("div");
                    a.parentNode.insertBefore(c, a), c.innerHTML = a.innerHTML, a.parentNode.removeChild(a), a = c
                }
            };
        while (f && f.nodeName !== "BODY") {
            if (g && f.childNodes.length) {
                g = !1;
                var i = f.getElementsByClassName("SolutionForm_Highlights");
                while (i.length) {
                    var j = i[0],
                        k = j.childNodes;
                    frag.appendChild(k[0]), i[0].parentNode.insertBefore(frag, i[0]), i[0].parentNode.removeChild(i[0])
                }
                var l = f.querySelectorAll("div[dir]"),
                    m = l ? l.length : 0;
                for (var n = 0; n < l.length; n++) l[0].removeAttribute("dir");
                f.removeAttribute("dir")
            } else if (f.id === "SolutionForm_Container") {
                var k = f.childNodes;
                frag.appendChild(k[0]), f.parentNode.insertBefore(frag, f), f.parentNode.removeChild(f)
            } else f.nodeName !== "#text" && f.getAttribute("dir") && f.removeAttribute("dir");
            h(f), f = f.parentElement
        }
    }
    a.updateToolbar(), ZohoDeskEditor_Init.needEditorStats && a.updateCount(command), c = b.getSelection(), b.getSelection().removeAllRanges(), c.addRange(e)
}, ZohoDeskEditor.prototype.insertListOperation = function(a) {
    var b = this;
    switch (a) {
        case "UL":
            var c = b.getPosFromCursor("OL"),
                d = b.getPosFromCursor("UL");
            c == -1 && d == -1 ? b.squireInstance.makeUnorderedList() : c > d ? b.squireInstance.makeUnorderedList() : d > c && (c > 0 || b.getPosFromCursor("UL", 1) > 0 ? b.squireInstance.decreaseListLevel() : b.squireInstance.removeList()), b.updateToolbar();
            break;
        case "OL":
            var c = b.getPosFromCursor("OL"),
                d = b.getPosFromCursor("UL");
            c == -1 && d == -1 ? b.squireInstance.makeOrderedList() : d > c ? b.squireInstance.makeOrderedList() : c > d && (d > 0 || b.getPosFromCursor("OL", 1) > 0 ? b.squireInstance.decreaseListLevel() : b.squireInstance.removeList())
    }
}, ZohoDeskEditor.drag = function(a, b) {
    var c = document,
        d = c.body,
        e = c.getElementById(b),
        f = e.style,
        g = ZohoDeskEditor.getPos(e),
        h = a.clientX - g.offsetLeft,
        i = a.clientY - g.offsetTop,
        j = d.clientWidth - e.offsetWidth,
        k = Math.max(d.scrollHeight, c.documentElement.scrollHeight) - e.offsetHeight;
    return f.cursor = "move", f.filter = 'alpha(opacity="90")', f.opacity = "0.9", c.onmousemove = function(a) {
        a = a || window.event;
        var b = a.clientX - h,
            c = a.clientY - i;
        return b >= 0 && b <= j ? f.left = b + "px" : b < 0 ? f.left = "0px" : b > j && (f.left = j + "px"), c >= 0 && c <= k ? f.top = c + "px" : c < 0 ? f.top = "0px" : c > k && (f.top = k + "px"), !1
    }, c.onmouseup = function() {
        return f.cursor = "", f.filter = 'alpha(opacity="100")', f.opacity = "1", c.onmousemove = null, c.onmouseup = null, !1
    }, !1
}, ZohoDeskEditor.setPosition = function(a, b) {
    var c = document,
        d = c.body,
        e = c.documentElement,
        f = a.style,
        g;
    ZohoDeskEditor_Init.is_ie ? g = (d.clientHeight - a.offsetHeight) / 3 + Math.max(d.scrollTop, c.documentElement.scrollTop) : g = (Math.min(d.clientHeight, e.clientHeight) - a.offsetHeight) / 3 + Math.max(d.scrollTop, e.scrollTop), g < 0 && (g = 10), f.top = g + "px", g = (d.clientWidth - a.offsetWidth) / 3 + ZohoDeskEditor.getPos(b).offsetLeft / 2, g < 50 && (g = 100), f.left = g + "px"
}, ZohoDeskEditor.prototype.focus = function() {
    var a = this;
    a.mode === "plaintext" ? a._textarea.focus() : a.win.focus()
}, ZohoDeskEditor.getPos = function() {
    var a = {};
    return a.left = 0, a.top = 0, ZohoDeskEditor_Init.is_ie && (a = document.documentElement.getBoundingClientRect()),
        function(b) {
            var c = b.getBoundingClientRect(),
                d = window.scrollY || window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop,
                e = window.scrollX || window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft;
            return {
                offsetLeft: c.left + e - a.left,
                offsetTop: c.top + d - a.top
            }
        }
}(), ZohoDeskEditor.prototype.updateCount = function(a) {
    var b = this;
    switch (a) {
        case "bold":
            a = "b";
            break;
        case "italic":
            a = "i";
            break;
        case "underline":
            a = "u";
            break;
        case "strikethrough":
            a = "st";
            break;
        case "justifyleft":
            a = "jl";
            break;
        case "justifyright":
            a = "jr";
            break;
        case "justifyfull":
            a = "jf";
            break;
        case "justifycenter":
            a = "jc";
            break;
        case "insertunorderedlist":
            a = "ul";
            break;
        case "insertorderedlist":
            a = "ol";
            break;
        case "outdent":
            a = "od";
            break;
        case "indent":
            a = "id";
            break;
        case "removeformat":
            break;
        case "link":
            a = "li";
            break;
        case "unlink":
            a = "uli";
            break;
        case "table":
            a = "ta";
            break;
        case "inserthorizontalrule":
            a = "hr";
            break;
        case "quote":
            a = "qu";
            break;
        case "image":
            a = "img";
            break;
        case "spellcheck":
            a = "sp";
            break;
        case "subscript":
            a = "ss";
            break;
        case "superscript":
            a = "sps";
            break;
        case "forecolor":
            a = "fc";
            break;
        case "hilitecolor":
            a = "bc";
            break;
        case "object":
            a = "ihtm";
            break;
        case "edithtml":
            a = "ehtm";
            break;
        case "code":
            a = "cod"
    }
    b.clickCount[a] ? b.clickCount[a]++ : b.clickCount[a] = 1
}, ZohoDeskEditor.prototype.resize = function(a) {
    var b = this,
        c = b.iframe,
        d = b.outerdiv;
    a.height && (d.style.height = a.height + "px", c.style.height = a.height + "px"), a.width && (d.style.height = a.height + "px", c.style.height = a.height + "px")
}, ZohoDeskEditor.prototype.showDropDown = function(a, b, c) {
    var d = this,
        e = a.currentTarget,
        f = document,
        g, h = d.doc,
        i, j, k, l, m, n, o, p, q, r;
    p = ["#ffffff", "#cceeff", "#ccccff", "#e5ccff", "#ffccff", "#ffccee", "#ffcccc", "#ffe5cc", "#ffffcc", "#ccffcc", "#ccffff", "#cccccc", "#99ccff", "#9999ff", "#cc99ff", "#ff99ff", "#ff99cc", "#ff9999", "#ffcc99", "#ffff99", "#99ff99", "#99ffff", "#c0c0c0", "#66ccff", "#6666ff", "#b266ff", "#ff66fe", "#ff66b2", "#ff6666", "#ffb266", "#feff66", "#66ff66", "#66feff", "#999999", "#399cfd", "#3333ff", "#9933ff", "#ff33fe", "#ff3398", "#ff3333", "#ff9933", "#feff33", "#33ff33", "#33feff", "#666666", "#3399ff", "#0000ff", "#7700ff", "#ff00ee", "#ff0077", "#ff0000", "#ff7f00", "#feff00", "#00ff00", "#00feff", "#444444", "#0065cc", "#0000cc", "#6600cc", "#cc00cb", "#cc00cb", "#cc0000", "#cc6600", "#cbcc00", "#00cc00", "#00cbcc", "#333333", "#004c99", "#000099", "#4B0099", "#990098", "#99004c", "#990000", "#994c00", "#989900", "#009900", "#009899", "#000000", "#003366", "#000066", "#330066", "#660066", "#660032", "#660000", "#663300", "#666600", "#006600", "#006666"], q = [{
        htm: "<i class='KB_Editor_smilenew'></i>"
    }, {
        htm: "<i class='KB_Editor_sad'></i>"
    }, {
        htm: "<i class='KB_Editor_lol'></i>"
    }, {
        htm: "<i class='KB_Editor_angry'></i>"
    }, {
        htm: "<i class='KB_Editor_tongueout'></i>"
    }, {
        htm: "<i class='KB_Editor_coolnew'></i>"
    }, {
        htm: "<i class='KB_Editor_winknew'></i>"
    }, {
        htm: "<i class='KB_Editor_meh'></i>"
    }, {
        htm: "<i class='KB_Editor_tearofjoy'></i>"
    }, {
        htm: "<i class='KB_Editor_shocked'></i>"
    }, {
        htm: "<i class='KB_Editor_loveit'></i>"
    }, {
        htm: "<i class='KB_Editor_neutral'></i>"
    }, {
        htm: "<i class='KB_Editor_worried'></i>"
    }, {
        htm: "<i class='KB_Editor_yummy'></i>"
    }, {
        htm: "<i class='KB_Editor_sleepy'></i>"
    }, {
        htm: "<i class='KB_Editor_dizzy'></i>"
    }, {
        htm: "<i class='KB_Editor_sick'></i>"
    }, {
        htm: "<i class='KB_Editor_injured'></i>"
    }, {
        htm: "<i class='KB_Editor_idea'></i>"
    }, {
        htm: "<i class='KB_Editor_doubtful'></i>"
    }, {
        htm: "<i class='KB_Editor_tensed'></i>"
    }, {
        htm: "<i class='KB_Editor_searching'></i>"
    }, {
        htm: "<i class='KB_Editor_anxious'></i>"
    }, {
        htm: "<i class='KB_Editor_lipssealed'></i>"
    }, {
        htm: "<i class='KB_Editor_halo'></i>"
    }, {
        htm: "<i class='KB_Editor_like'></i>"
    }, {
        htm: "<i class='KB_Editor_dislike'></i>"
    }, {
        htm: "<i class='KB_Editor_claps'></i>"
    }, {
        htm: "<i class='KB_Editor_yoyo'></i>"
    }, {
        htm: "<i class='KB_Editor_ontarget'></i>"
    }], g = d.toolbarobject[b], n = function() {
        i && (d.toolbardiv.removeChild(i), ZohoDeskEditor.removeClass(g, "ze_dn"), b != "attach" && ZohoDeskEditor.removeClass(g, "ze_Sel"), ZohoDeskEditor._removeEvent(f, "mousedown", k), ZohoDeskEditor._removeEvent(h, "mousedown", k), ZohoDeskEditor._removeEvent(h, "keydown", k))
    }, k = function(a) {
        i = d.toolbardiv.getElementsByClassName("KB_Editor_common_DropDown")[0];
        if (a) {
            o = a.target;
            for (; o !== null && o !== i;) o = o.parentNode
        }
        o || n()
    }, j = function(a) {
        var f = a.target;
        d.mode == "richtext" && r && (d.win.focus(), d.restoreSelection(r));
        switch (b) {
            case "fontfamily":
                d.win.focus(), d.updateFontfamily(f, g);
                break;
            case "fontSize":
                d.win.focus(), d.updateFontsize(f, g, b);
                break;
            case "forecolor":
            case "backcolor":
                d.win.focus(), d.updateColor(f, e, b);
                break;
            case "alignoptions":
            case "listoptions":
            case "indentoptions":
            case "insertoptions":
            case "direction":
                d.updateFormatoptions(f, g, c, a);
                break;
            case "otheroptions":
                d.updateOtheroptions(f, c);
                break;
            case "heading":
                d.heading(f, d, g);
                break;
            case "smiley":
                d.insertSmiley(f);
                break;
            case "moreoptions":
                d.updateMoreOptions(f, g, c, a);
                break;
            case "styletext":
                d.insertTextStyles(a)
        }
        n()
    };
    switch (b) {
        case "fontfamily":
            m = {
                type: b,
                list: ZohoDeskEditor_Init[b]
            };
            var s = d.doc.queryCommandValue("fontname"),
                t, u = ZohoDeskEditor_Init[b].length,
                v;
            if (s) {
                t = s.split(",")[0].toLowerCase();
                for (v = 0; v < u; v++) fontFamilyLiObj = ZohoDeskEditor_Init[b][v], fontFamilyLiObj.ff.split(",")[0].toLowerCase() === t ? fontFamilyLiObj.liClass = "sel" : fontFamilyLiObj.liClass = ""
            }
            break;
        case "fontSize":
            m = {
                type: b,
                list: ZohoDeskEditor_Init[b]
            };
            var w = d.doc.queryCommandValue("fontSize"),
                x, y;
            fontSizeAnchorArray = ZohoDeskEditor_Init[b], fontSizeAnchorArrayLength = fontSizeAnchorArray.length, w || (w = d.getFormattingValues("size"));
            if (w) {
                switch (w) {
                    case "1":
                    case 1:
                    case "10px":
                        y = "1";
                        break;
                    case "2":
                    case 2:
                    case "13px":
                        y = "2";
                        break;
                    case "3":
                    case 3:
                    case "16px":
                        y = "3";
                        break;
                    case "4":
                    case 4:
                    case "18px":
                        y = "4";
                        break;
                    case "5":
                    case 5:
                    case "24px":
                        y = "5";
                        break;
                    case "6":
                    case 6:
                    case "32px":
                        y = "6";
                        break;
                    case "7":
                    case 7:
                    case "48px":
                        y = "7"
                }
                for (x = 0; x < fontSizeAnchorArrayLength; x++) fontSizeAnchorArray[x].datAttr === y ? fontSizeAnchorArray[x].liClass = "sel" : fontSizeAnchorArray[x].liClass = ""
            } else
                for (x = 0; x < fontSizeAnchorArrayLength; x++) fontSizeAnchorArray[x].liClass = "";
            break;
        case "forecolor":
        case "backcolor":
            m = {
                type: "colorpicker",
                ulClass: "ze_cb",
                list: p
            };
            break;
        case "smiley":
            m = {
                type: b,
                ulClass: "ze_sb",
                list: q
            };
            break;
        case "otheroptions":
            m = {
                type: c,
                list: ZohoDeskEditor_Init[c],
                editr: d
            }, m.ulClass = "ze_ddr";
            break;
        case "alignoptions":
        case "listoptions":
        case "indentoptions":
        case "insertoptions":
        case "heading":
        case "moreoptions":
        case "direction":
            m = {
                type: c,
                list: ZohoDeskEditor_Init[c]
            };
            break;
        case "directionoptions":
            m = {
                type: c,
                list: ZohoDeskEditor_Init[c]
            };
            break;
        case "attach":
            m = {
                type: b,
                list: ZohoDeskEditor_Init.attachDrop
            };
            break;
        case "styletext":
            m = {
                type: b
            }
    }
    d.win.focus(), d.mode == "richtext" && (r = d.saveSelection()), ZohoDeskEditor.conDrop(m, d), i = d.toolbardiv.getElementsByClassName("KB_Editor_common_DropDown")[0], b == "fontfamily" ? i.style.width = "175px" : b == "fontSize" && (i.style.width = "60px"), ZohoDeskEditor.addClass(g, "ze_dn"), ZohoDeskEditor.addClass(g, "ze_Sel"), ZohoDeskEditor._addEvent(i, "click", j), ZohoDeskEditor._addEvent(f, "mousedown", k), ZohoDeskEditor._addEvent(h, "mousedown", k), ZohoDeskEditor._addEvent(h, "keydown", k);
    while (e.nodeName !== "LI") e = e.parentNode;
    l = i.style;
    var z = i.getElementsByClassName("KB_Editor_Slidebar_Arrow")[0].style,
        A = e.offsetLeft,
        B = e.offsetTop,
        C = e.offsetWidth,
        D = e.offsetHeight,
        E = A + C / 2 - i.offsetWidth / 2;
    E + i.offsetWidth > d.outerdiv.offsetWidth ? l.right = ZohoDeskEditor_Init.dropDownLeftPadding + "px" : E < 0 ? l.left = ZohoDeskEditor_Init.dropDownLeftPadding + "px" : l.left = E + "px", l.top = B + D + ZohoDeskEditor_Init.dropDownTopPadding + "px", E = A - i.offsetLeft - 5 + C / 2, z.left = E < 0 ? "15px" : E + "px", b === "styletext" && (SolutionForm.hideBg(), SolutionForm.needBg())
}, ZohoDeskEditor.conDrop = function(a, b) {
    var c, d, e, f, g = a.list ? a.list.length : 0;
    c = document.createElement("div"), c.id = "ze_dropdown", c.className = "KB_Editor_common_DropDown", d = document.createElement("ul"), a.ulClass && (d.className = a.ulClass), attachOnClick = function(a) {
        return function() {
            a.clk(b)
        }
    }, ["insertoptions", "direction", "moreoptions"].indexOf(a.type) > -1 && c.classList.add("KB_Editor_Morediv"), a.type === "attach" && c.classList.add("KB_Editor_imagediv"), (a.type === "align" || a.type === "indent" || a.type === "list") && c.classList.add("KB_Editor_DropDown_Icons");
    var h = document.createElement("span");
    h.className = ZohoDeskEditor_Init.slidebarClass || "KB_Editor_DropDown_Slidebar";
    var i = document.createElement("span");
    i.className = "KB_Editor_Slidebar_Arrow", h.appendChild(i), a.type === "styletext" ? c.appendChild(h) : d.appendChild(h);
    for (f = 0; f < g; f++) {
        e = document.createElement("li"), a.type == "fontSize" ? e.setAttribute("data-size", a.list[f].datAttr) : a.type == "fontfamily" ? e.style.fontFamily = a.list[f].ff : a.type == "colorpicker" ? e.style.backgroundColor = a.list[f] : ["insertoptions", "direction", "moreoptions", "align", "list", "indent", "textDir", "others", "heading"].indexOf(a.type) > -1 && e.setAttribute("data-" + a.type, a.list[f].datAttr);
        if (a.list[f].htm)
            if (a.list[f].datAttr && a.list[f].datAttr == "switchmode") {
                if (!!b.initobj.avoidPlainText || !ZohoDeskEditor_Init.needplaintext) continue;
                a.editr.mode == "richtext" ? e.innerHTML = "Plain Text mode" : a.editr.mode == "plaintext" && (e.innerHTML = "Rich Text mode")
            } else if (a.type === "heading" && a.list[f].datAttr != "div") {
            var j = document.createElement(a.list[f].datAttr);
            j.innerHTML = a.list[f].htm, e.appendChild(j)
        } else if (a.list[f].iconClass) {
            var k = document.createElement("span"),
                l = document.createElement("span"),
                m = document.createElement("span"),
                n = document.createElement("span"),
                o = a.list[f].datAttr;
            k.className = a.list[f].iconClass, l.className = "path1", m.className = "path2", n.className = "KB_Editor_text", n.innerHTML = a.list[f].htm, k.appendChild(l), k.appendChild(m), e.appendChild(k), e.appendChild(n)
        } else e.innerHTML = a.list[f].htm;
        a.list[f].liClass && (e.className = a.list[f].liClass), d.appendChild(e);
        if (a.list[f].clk) {
            var p = a.list[f];
            ZohoDeskEditor._addEvent(e, "click", attachOnClick(p))
        }
    }
    if (a.type === "styletext") {
        var q = document.getElementById("SolutionForm_Content_Text_Property").children[0].cloneNode(!0);
        c.appendChild(q), q = document.getElementsByClassName("SolutionForm_openBg")[0].cloneNode(!0), c.appendChild(q)
    } else c.appendChild(d);
    b.toolbardiv.appendChild(c)
}, ZohoDeskEditor.prototype.updateFontfamily = function(a, b) {
    var c, d = this,
        e = d.doc,
        f = d.getContent(),
        g;
    c = a.style.fontFamily, d.win.focus(), d.squireInstance.setFontFace(c), d.saveCurrentState()
}, ZohoDeskEditor.prototype.updateFontsize = function(a, b, c) {
    var d = this,
        e = d.doc,
        f = d.getContent(),
        g;
    ZohoDeskEditor_Init.changedTools.indexOf(c) < 0 && (b.innerHTML = a.innerHTML + b.innerHTML.substring(b.innerHTML.indexOf("<"))), d.win.focus();
    var h = a.getAttribute("data-size");
    d.squireInstance.setFontSize(d.fontsizeConversion("fontvaltopx", h) + "px"), d.saveCurrentState()
}, ZohoDeskEditor.prototype.updateColor = function(a, b, c) {
    var d, e, f, g = this,
        h = g.doc,
        i = g.getContent(),
        j;
    d = a.style.backgroundColor, d = d.replace(/rgb\(|\)/g, "").split(","), f = d.length;
    for (e = 0; e < f; e++) d[e] = parseInt(d[e], 10).toString(16), d[e] = d[e].length == 1 ? "0" + d[e] : d[e];
    d = "#" + d.join(""), g.win.focus(), c == "backcolor" ? g.squireInstance.setHighlightColour(d) : c == "forecolor" && g.squireInstance.setTextColour(d), g.saveCurrentState()
}, ZohoDeskEditor.prototype.updateMoreOptions = function(a, b, c, d) {
    var e = this;
    e.updateFormatoptions(a, b, c, d), e.updateOtheroptions(a, b, c, d)
}, ZohoDeskEditor.prototype.updateFormatoptions = function(a, b, c, d) {
    var e, f = this,
        g = f.doc;
    while (a.nodeName != "LI") a = a.parentElement;
    e = a.getAttribute("data-" + c), f.win.focus();
    switch (e) {
        case "justifyleft":
            f.squireInstance.setTextAlignment("left"), c === "align" && (b.className = "KBEditortools-align-left");
            break;
        case "justifyright":
            f.squireInstance.setTextAlignment("right"), c === "align" && (b.className = "KBEditortools-align-right");
            break;
        case "justifyfull":
            f.squireInstance.setTextAlignment("full"), c === "align" && (b.className = "KBEditortools-align-justify");
            break;
        case "justifycenter":
            f.squireInstance.setTextAlignment("center"), c === "align" && (b.className = "KBEditortools-align-center");
            break;
        case "rtl":
        case "ltr":
            f.doc.body.style.direction = e, c === "direction" && (b.className = "KBEditortools-" + e);
            break;
        case "insertunorderedlist":
            f.insertListOperation("UL"), c === "list" && (b.className = "KBEditortools-list-round");
            break;
        case "insertorderedlist":
            f.insertListOperation("OL"), c === "list" && (b.className = "KBEditortools-list-number");
            break;
        case "removelist":
            f.squireInstance.removeList();
            break;
        case "indent":
            f.getPosFromCursor("UL") > 0 || f.getPosFromCursor("OL") > 0 ? f.squireInstance.increaseListLevel() : f.squireInstance.increaseQuoteLevel(), c === "indent" && (b.className = "KBEditortools-increaseindent");
            break;
        case "table":
            f.createTable();
            break;
        case "object":
            f.insertObj();
            break;
        case "code":
            f.insertCode();
            break;
        case "edithtml":
            f.htmlView();
            break;
        case "inserthorizontalrule":
            f.doc.execCommand(e, !1, undefined), f.updateToolbar();
            break;
        case "outdent":
            var h = f.getPosFromCursor("OL"),
                i = f.getPosFromCursor("UL");
            h == -1 && i == -1 ? f.squireInstance.decreaseQuoteLevel() : i > h ? f.getPosFromCursor("UL", 1) > 0 || f.getPosFromCursor("OL") > 0 ? f.squireInstance.decreaseListLevel() : f.squireInstance.removeList() : h > i && (f.getPosFromCursor("OL", 1) > 0 || f.getPosFromCursor("UL") > 0 ? f.squireInstance.decreaseListLevel() : f.squireInstance.removeList()), c === "indent" && (b.className = "KBEditortools-decreaseindent");
            break;
        case "link":
        case "unlink":
            f.execCommand(d, e)
    }
    f.saveCurrentState()
}, ZohoDeskEditor.prototype.heading = function(a, b, c) {
    var d = b.doc,
        e = d.getSelection(),
        f = e.getRangeAt(0);
    c.innerHTML = a.innerText + c.innerHTML.substring(c.innerHTML.indexOf("<"));
    var g = a.getAttribute("data-heading") || a.parentElement.getAttribute("data-heading");
    b.win.focus(), d.execCommand("formatblock", !1, g) || d.execCommand("formatblock", !1, "<" + g + ">");
    if (g.toLowerCase() === "p") {
        var h = b._getSelection().anchorNode,
            i = h.nodeName !== "P" ? h.parentElement : h,
            j = b.doc.createElement("div");
        i.parentNode.insertBefore(j, i), j.innerHTML = i.innerHTML, e = d.getSelection(), e.removeAllRanges(), e.addRange(f), f.selectNode(j), i.parentNode.removeChild(i)
    }
    b.saveCurrentState(), b.updateToolbar(), b.styletext && !b.isExpanded && b.handleContentStyles()
}, ZohoDeskEditor.prototype.updateOtheroptions = function(a, b) {
    var c = this;
    c.win.focus(), b == "plainText" || a.innerText === "Plain Text" ? c.mode == "richtext" ? c.confirmPlainText(c.getContent()) : c.mode == "plaintext" && c.richText(ZohoDeskEditor.getFormattedContent(c.getContent())) : (b == "spellcheck" || a.innerText === "Spell Check") && c.spellcheck()
}, ZohoDeskEditor.prototype.insertSmiley = function(a) {
    var b = this,
        c, d = ZohoDeskEditor.getContextValue(),
        e = ZohoDeskEditor_Init.imgPath || "/support/images/editor/",
        f = "margin: 0px 10px; vertical-align:middle; width:24px; height:24px;";
    b.win.focus(), a.nodeName == "LI" && (a = a.firstChild);
    if (a.className.indexOf("KB_Editor_") != 0 || a.nodeName != "I") return;
    c = a.className.replace("KB_Editor_", ""), b.squireInstance.insertImage(e + c + ".gif", {
        style: f
    }), b.saveCurrentState()
}, ZohoDeskEditor.prototype.resizeTable = function(a) {
    "use strict";
    var b = this,
        c = b.doc,
        d = document,
        e = a,
        f, g, h, i, j, k, l, m, n, o, p, q, r, s;
    s = c.getElementById("_enclosingDiv"), q = c.getElementById("resizeDiv"), r = d.createElement("div"), r.id = "_enclosingDiv";
    var t = function() {
        j = e.getBoundingClientRect(), k = j.left, l = j.top, b.win.scrollX ? r.style.left = k + b.win.scrollX + "px" : r.style.left = k + b.win.pageXOffset + "px", b.win.scrollY ? r.style.top = j.top + b.win.scrollY + "px" : r.style.top = j.top + b.win.pageYOffset + "px", b.win.scrollY ? l += b.win.scrollY : l += b.win.pageYOffset, b.win.scrollX ? k += b.win.scrollX : k += b.win.pageXOffset
    };
    o = function() {
        ZohoDeskEditor._addEvent(d, "mousedown", f), ZohoDeskEditor._addEvent(c, "mousedown", f), ZohoDeskEditor._addEvent(c, "keydown", h)
    }, m = function() {
        ZohoDeskEditor._removeEvent(c, "mousedown", f), ZohoDeskEditor._removeEvent(d, "mousedown", f), ZohoDeskEditor._removeEvent(c, "keydown", h)
    }, n = function() {
        ZohoDeskEditor._removeEvent(c, "mousemove", i), ZohoDeskEditor._removeEvent(c, "mouseup", g), ZohoDeskEditor._removeEvent(d, "mouseup", g)
    }, h = function() {
        var a = e.getBoundingClientRect();
        p && (p.style.top = a.height + l - 4 + "px", p.style.left = a.width + a.left - 4 + "px")
    };
    var u = function(a) {
        s = c.getElementById("_enclosingDiv");
        var b = a.clientY,
            f = a.clientX,
            h = e.getBoundingClientRect(),
            j = h.height,
            r = h.width;
        g = function() {
            n(), q = c.getElementById("resizeDiv");
            if (q !== null && s !== null) {
                e.style.width = s.offsetWidth - 4 + "px", e.style.height = s.offsetHeight - 4 + "px";
                var a = e.getBoundingClientRect();
                p.style.top = a.height + l - 4 + "px", p.style.left = a.width + a.left - 4 + "px", s.parentElement.removeChild(s), o()
            }
        }, i = function(a) {
            s.style.width = r + a.clientX - f + "px", parseInt(s.style.width) <= 25 && (s.style.width = "25px"), s.style.height = j + a.clientY - b + "px", parseInt(s.style.height) <= 25 && (s.style.height = "25px");
            var c = s.getBoundingClientRect();
            t(), p.style.top = c.height + l - 4 + "px", p.style.left = k + c.width - 4 + "px"
        }, m(), ZohoDeskEditor._addEvent(c, "mousemove", i), ZohoDeskEditor._addEvent(c, "mouseup", g), ZohoDeskEditor._addEvent(d, "mouseup", g)
    };
    f = function(a) {
        p = c.getElementById("resizeDiv"), a.target.id === "resizeDiv" ? (m(), n(), t(), r.style.height = j.height + "px", r.style.width = j.width + "px", c.body.appendChild(r), b._stopEvent(a), u(a)) : p && (p.parentElement.removeChild(p), n(), m()), a.target.ownerDocument !== document && (b._getSelection().getRangeAt(0).collapse(), a.target.focus())
    }, t(), r.style.position = "absolute", r.style.border = "2px dashed #555", p = d.createElement("div"), p.id = "resizeDiv", c.body.appendChild(p), p.style.top = j.height + l - 4 + "px", p.style.left = k + j.width - 4 + "px", p.style.height = "16px", p.style.width = "16px", p.style.position = "absolute", p.style.backgroundRepeat = "no-repeat", p.style.cursor = "se-resize", p.contentEditable = !1, o()
}, ZohoDeskEditor.prototype.showContextMenu = function(a, b, c) {
    var d = this,
        e = document,
        f, g, h, i = d.doc,
        j, k, l, m, n, o, p, q, r, s, t, u, v, w = a.target;
    delete_table = function() {
        d.win.focus(), c.parentNode.removeChild(c), hideContextMenu(), d.win.focus(), d.saveCurrentState()
    }, delete_current_row = function() {
        d.win.focus(), t = get_current_row();
        if (!t) return;
        t.parentNode.removeChild(t);
        if (c.rows.length == 0) {
            delete_table();
            return
        }
        hideContextMenu(), d.saveCurrentState()
    }, delete_current_column = function() {
        d.win.focus(), t = get_current_row();
        if (!t) return;
        var a = get_current_column(),
            b = getPosition(t, a),
            c = t.parentNode,
            e = c.getElementsByTagName("TR");
        for (u = 0; u < e.length; u++) {
            var f = e[u].getElementsByTagName("TD");
            e[u].removeChild(f[b])
        }
        if (e[0].getElementsByTagName("TD").length == 0) {
            delete_table();
            return
        }
        hideContextMenu(), d.saveCurrentState()
    }, getColumnsNo = function(a) {
        var b = a.getElementsByTagName("TD");
        return b.length
    }, constructRow = function(a) {
        var b = i.createDocumentFragment(),
            c = i.createElement("tr");
        b.appendChild(c);
        for (u = 0; u < a; u++) {
            var d = i.createElement("td"),
                e = i.createElement("div");
            e.appendChild(i.createElement("br")), d.appendChild(e), c.appendChild(d)
        }
        return b
    }, insert_row_above = function() {
        d.win.focus(), t = get_current_row();
        if (!t) return;
        var a = getColumnsNo(t);
        h = constructRow(a), t.parentNode.insertBefore(h, t), hideContextMenu(), selectedRange && d.restoreSelection(selectedRange), d.win.focus(), d.saveCurrentState()
    }, insert_row_below = function() {
        d.win.focus(), t = get_current_row();
        if (!t) return;
        var a = getColumnsNo(t);
        h = constructRow(a), t.parentNode.insertBefore(h, t.nextSibling), hideContextMenu(), selectedRange && d.restoreSelection(selectedRange), d.win.focus(), d.saveCurrentState()
    }, insert_column_left = function() {
        d.win.focus(), t = get_current_row();
        if (!t) return;
        var a = get_current_column(),
            b = getPosition(t, a),
            c = t.parentNode,
            e = c.getElementsByTagName("TR");
        for (u = 0; u < e.length; u++) {
            var f = e[u].getElementsByTagName("TD"),
                g = i.createElement("td"),
                h = i.createElement("div");
            h.appendChild(i.createElement("br")), g.appendChild(h), e[u].insertBefore(g, f[b])
        }
        hideContextMenu(), d.saveCurrentState()
    }, getPosition = function(a, b) {
        var c = a.getElementsByTagName("TD");
        for (u = 0; u < c.length; u++)
            if (b === c[u]) return u
    }, get_current_row = function() {
        p = w;
        if (p.nodeName != "TR")
            for (; p !== null; p = p.parentNode)
                if (p.nodeName == "TR") break;
        return p
    }, get_current_column = function() {
        p = w;
        if (p.nodeName != "TD")
            for (; p !== null; p = p.parentNode)
                if (p.nodeName == "TD") break;
        return p
    }, insert_column_right = function() {
        d.win.focus(), t = get_current_row();
        if (!t) return;
        var a = get_current_column(),
            b = getPosition(t, a),
            c = t.parentNode,
            e = c.getElementsByTagName("TR");
        for (u = 0; u < e.length; u++) {
            var f = e[u].getElementsByTagName("TD"),
                g = i.createElement("td"),
                h = i.createElement("div");
            h.appendChild(i.createElement("br")), g.appendChild(h), e[u].insertBefore(g, f[b].nextSibling)
        }
        hideContextMenu(), d.saveCurrentState()
    }, edit_table = function() {
        var a = c;
        d.createTable(a), hideContextMenu(1)
    };
    var x = {
        table: [
            [{
                cmd: "Insert Rows Above",
                id: "insert_row",
                "class": "li_class",
                method: insert_row_above
            }, {
                cmd: "Insert Rows Below",
                "class": "li_class",
                method: insert_row_below
            }, {
                cmd: "Insert Column left",
                "class": "li_class",
                method: insert_column_left
            }, {
                cmd: "Insert Column right",
                "class": "li_class",
                method: insert_column_right
            }],
            [{
                cmd: "Delete Row",
                id: "delete_row",
                method: delete_current_row
            }, {
                cmd: "Delete Column",
                "class": "li_class",
                method: delete_current_column
            }, {
                cmd: "Delete Table",
                method: delete_table
            }],
            [{
                cmd: "Edit Table",
                method: edit_table
            }]
        ]
    };
    executeFunction = function(a, b) {
        b[a].method()
    };
    switch (b) {
        case "table":
            if (!get_current_row()) return;
            f = x.table
    }
    hideContextMenu = function(a) {
        a || (selectedRange && d.restoreSelection(selectedRange), d.win.focus()), j = document.getElementById("ze_contextMenudd"), j && (document.body.removeChild(j), ZohoDeskEditor._removeEvent(e, "mousedown", l), ZohoDeskEditor._removeEvent(i, "mousedown", l), ZohoDeskEditor._removeEvent(i, "keydown", l))
    }, l = function(a) {
        j = document.getElementById("ze_contextMenudd");
        if (a) {
            p = a.target;
            for (; p !== null; p = p.parentNode)
                if (p === j) break
        }
        p || hideContextMenu()
    }, setPositions = function(a) {
        var b = 0,
            c = 0,
            e = document,
            f = document.body,
            g = e.documentElement,
            h = Math.max(f.scrollTop, g.scrollTop),
            i = d.iframe.getBoundingClientRect(),
            k = w.getBoundingClientRect();
        a.pageX || a.pageY ? (b = i.left + k.left + (a.pageX - k.left), d.win.scrollY ? c = i.top + k.top + (a.pageY - k.top) - d.win.scrollY : c = i.top + k.top + (a.pageY - k.top) - d.win.pageYOffset) : (b = i.left + k.left + (a.clientX - k.left), d.win.scrollY ? c = i.top + k.top + (a.clientY - k.top) - d.win.scrollY : c = i.top + k.top + (a.clientY - k.top) - d.win.pageYOffset), c += h || 0, j.style.left = parseInt(b) + "px", j.style.top = parseInt(c) + "px";
        var l = ZohoDeskEditor.getPos(d.outerdiv),
            m = j.style,
            n = j.offsetHeight,
            o = document.body.getBoundingClientRect().width;
        b + j.offsetWidth + 10 > o && (m.left = "auto", b = window.innerWidth - b, m.right = parseInt(b) + "px");
        if (c + n > window.innerHeight - 20) {
            var p = c - n;
            p < 10 ? m.top = "40px" : m.top = parseInt(p) + "px"
        }
    }, d.constructContextMenu(f, "ze_contextMenudd"), d.win.focus(), selectedRange = d.saveSelection(), j = document.getElementById("ze_contextMenudd"), setPositions(a), ZohoDeskEditor._addEvent(e, "mousedown", l), ZohoDeskEditor._addEvent(i, "mousedown", l), ZohoDeskEditor._addEvent(i, "keydown", l)
}, ZohoDeskEditor.prototype.constructContextMenu = function(a, b, c) {
    var d = this,
        e, f, g, h, i, j, k = a.length;
    e = document.createElement("div"), e.className = "ze_dd shw notrans ze_tbdr", e.id = b, f = document.createElement("div"), g = document.createElement("ul");
    for (i = 0; i < k; i++) {
        var l = a[i];
        for (j = 0; j < l.length; j++) h = document.createElement("li"), h.innerHTML = l[j].cmd, l[j].id && (h.id = l[j].id), l[j]["class"] && (h.className = l[j]["class"]), g.appendChild(h), h.setAttribute("data-value", j), l[j]["data-i"] && h.setAttribute("data-i", l[j]["data-i"]), l[j].color && (h.style.color = l[j].color), l[j].fontWeight && (h.style.fontWeight = l[j].fontWeight), l[j].method && (h.onclick = l[j].method);
        h = document.createElement("li"), h.className = "ze_lne", g.appendChild(h)
    }
    f.appendChild(g), e.appendChild(f), document.body.appendChild(e), c && ZohoDeskEditor._addEvent(g, "click", c), e.addEventListener("contextmenu", function(a) {
        return d._stopEvent(a), !1
    }, !1)
}, ZohoDeskEditor.prototype.saveSelection = function() {
    var a = this,
        b = document,
        c = a.doc;
    a.win.focus();
    var d = a.win.getSelection ? a.win.getSelection() : c.selection,
        e;
    try {
        d && (d.createRange ? e = d.createRange() : d.getRangeAt ? d.rangeCount == 0 ? a.focusAtStart(!0) : e = d.getRangeAt(0) : d.anchorNode && d.focusNode && c.createRange && (e = c.createRange(), e.setStart(d.anchorNode, d.anchorOffset), e.setEnd(d.focusNode, d.focusOffset), e.collapsed !== d.isCollapsed && (e.setStart(d.focusNode, d.focusOffset), e.setEnd(d.anchorNode, d.anchorOffset))))
    } catch (f) {}
    return e
}, ZohoDeskEditor.prototype.restoreSelection = function(a) {
    var b = this,
        c = document,
        d = b.doc,
        e = b.win.getSelection ? b.win.getSelection() : d.selection;
    e && a && (a.select ? a.select() : e.removeAllRanges && e.addRange && (e.removeAllRanges(), e.addRange(a)))
}, ZohoDeskEditor.prototype._getSelection = function() {
    return this.win.getSelection()
}, ZohoDeskEditor.prototype._createRange = function(a) {
    try {
        return a.getRangeAt(0)
    } catch (b) {
        return this.doc.createRange()
    }
}, ZohoDeskEditor.prototype._getSelectedText = function() {
    try {
        var a = this._getSelection();
        if (a) return a.toString()
    } catch (b) {
        return undefined
    }
}, ZohoDeskEditor.prototype.getParentElement = function() {
    var a = this,
        b = a._getSelection(),
        c = a._createRange(b),
        d = c.commonAncestorContainer;
    try {
        !c.collapsed && c.startContainer == c.endContainer && c.startOffset - c.endOffset <= 1 && c.startContainer.hasChildNodes() && (d = c.startContainer.childNodes[c.startOffset]);
        while (d.nodeType == 3) d = d.parentNode;
        return d
    } catch (e) {
        return undefined
    }
}, ZohoDeskEditor.prototype.pasteHTML = function(a) {
    var b, c, d = this,
        e = d.win;
    if (e.getSelection) {
        b = e.getSelection();
        if (b.getRangeAt && b.rangeCount) {
            c = b.getRangeAt(0), c.deleteContents();
            var f = d.doc.createElement("div");
            f.innerHTML = a;
            var g = d.doc.createDocumentFragment(),
                h, i;
            while (h = f.firstChild) i = g.appendChild(h);
            c.insertNode(g), i && (c = c.cloneRange(), c.setStartAfter(i), c.collapse(!0), b.removeAllRanges(), b.addRange(c))
        }
    } else d.doc.selection && d.doc.selection.type != "Control" && d.doc.selection.createRange().pasteHTML(a)
}, ZohoDeskEditor.prototype.insertHTML = function(a, b) {
    var c = this,
        d = c.mode;
    if (d && d === "plaintext") c.insertText(a);
    else {
        c.win.focus();
        var e, f, e = c.getContent(),
            g = NewDOMPurify || window.NewDOMPurify || editorModule && editorModule.exports;
        a = g.sanitize(a, {
            ADD_ATTR: ["contenteditable"]
        }), c.squireInstance ? c.squireInstance.insertHTML(a) : c.pasteHtml(a), f = c.getContent(), f != e && !b && c.saveCurrentState(), c.insertHTMLCallback && c.insertHTMLCallback();
        var h = c.squireInstance;
        h.addTextLinks(c.doc.body, c.doc.body, h)
    }
}, ZohoDeskEditor.prototype.insertText = function(a) {
    var b = this,
        c = b._textarea,
        d = c.value,
        e = c.selectionStart,
        f = c.selectionEnd;
    c && (a = ZohoDeskEditor.getText(a), e || e === 0 ? c.value = d.substring(0, e) + a + d.substring(f, d.length) : c.value += a, c.focus())
}, ZohoDeskEditor.prototype.getAllAncestors = function() {
    var a = this,
        b = a.getParentElement(),
        c = [];
    while (b && b.nodeType == 1 && b.tagName.toLowerCase() != "body") c.push(b), b = b.parentNode;
    return c.push(a.doc.body), c
}, ZohoDeskEditor.prototype.uploadImage = function(a) {
    var b = document,
        c = this,
        d, e, f, g, h, j, k, l, m, n, o, p, q, r, s, t, u, v = 20,
        w, x, y = undefined,
        z = c.doc,
        A;
    t = function(a) {
        a.keyCode === 27 && (c._stopEvent(a), x())
    };
    if (d = b.getElementById("KB_Editor_UploadImage_Popup")) l = d.getElementsByClassName("KB_Editor_ImageUrlDisc")[0], r = d.getElementsByClassName("KB_Editor_URLImage_Desc")[0], q = d.getElementsByClassName("KB_Editor_URLImage_Input")[0], m = d.getElementsByClassName("KB_Editor_URLImage_Preview")[0], e = d.getElementsByClassName("KB_Editor_DragDropImage")[0], _imgDragNDropInput = d.getElementsByClassName("file_input")[0], j = d.getElementsByClassName("KB_Editor_UploadFromDesktop_Action")[0], k = d.getElementsByClassName("KB_Editor_UploadImage_Preview")[0], u = d.getElementsByClassName("KB_Editor_UploadImage_Submit")[0], A = d.getElementsByClassName("KB_Editor_UploadImage_Cancel")[0];
    else {
        d = b.createElement("div"), d.className = "KB_Editor_UploadImage hide", d.id = "KB_Editor_UploadImage_Popup", e = b.createElement("div"), e.className = "KB_Editor_DragDrop KB_Editor_DragDropImage hide", e.id = "KB_Editor_DragDropImage", f = b.createElement("i"), f.className = "i-tag KBEditortools-image", h = b.createElement("div"), h.className = "dt-empty-txt mb10", h.innerText = "Drag & drop image here", _imgDragNDropInput = b.createElement("input"), _imgDragNDropInput.className = "file_input hide", _imgDragNDropInput.type = "file", _imgDragNDropInput.id = "file_input", _imgDragNDropInput.accept = "image/*", _imgDragNDropInput.multiple = "true", j = b.createElement("a"), j.className = "KB_Editor_UploadFromDesktop_Action", j.id = "KB_Editor_UploadFromDesktop_Action", j.href = "javascript:;", j.innerText = "or click here to browse", k = b.createElement("div"), k.className = "KB_Editor_ImageDisc hide KB_Editor_UploadImage_Preview", k.id = "KB_Editor_UploadImage_Preview", l = b.createElement("div"), l.className = "KB_Editor_ImageUrlDisc hide", l.id = "KB_Editor_URLImage", m = b.createElement("img"), m.src = "", m.id = "KB_Editor_URLImage_Preview", m.className = "KB_Editor_URLPreviewImage_Blur KB_Editor_URLImage_Preview", n = b.createElement("div"), n.className = "KB_Editor_clboth";
        var o = b.createElement("div");
        o.className = "KB_Editor_InputLabel mt30";
        var p = b.createElement("div");
        p.className = "KB_Editor_InputLabel mt30";
        var q = b.createElement("input");
        q.className = "KB_Editor_AnimateInput KB_Editor_URLImage_Input", q.id = "KB_Editor_URLImage_Input", q.type = "text", q.placeholder = "URL";
        var r = b.createElement("input");
        r.className = "KB_Editor_AnimateInput KB_Editor_URLImage_Desc", r.id = "KB_Editor_URLImage_Desc", r.type = "text", r.placeholder = "Description", r.autocomplete = "off", s = b.createElement("div"), s.className = "mt20 button_div", u = b.createElement("button"), u.className = "blue-btn KB_Editor_UploadImage_Submit", u.setAttribute("disabled", "disabled"), u.innerText = "Upload", A = b.createElement("button"), A.className = "btn ml7 KB_Editor_UploadImage_Cancel", A.innerText = "Cancel", b.body.appendChild(d), d.appendChild(e), e.appendChild(f), e.appendChild(h), e.appendChild(_imgDragNDropInput), e.appendChild(j), d.appendChild(k), d.appendChild(l), l.appendChild(m), l.appendChild(n), n.appendChild(o), n.appendChild(p), o.appendChild(q), p.appendChild(r), d.appendChild(s), s.appendChild(u), s.appendChild(A)
    }
    if (a === "url") {
        d.classList.remove("hide"), q.value = "", m.src = "", m.style.display = "none", x = function() {
            ZohoDeskEditor.hideOverlay(), c.win.focus(), d.classList.add("hide"), l.classList.add("hide"), q.value = "", m.src = "", m.style.display = "none", r.value = "", u.innerText = "Upload", ZohoDeskEditor._removeEvent(document, "keydown", t), ZohoDeskEditor._removeEvent(z, "keydown", t)
        };
        var B = function() {
            var a = q.value;
            if (a.length == 0) return;
            var b = "http://",
                c = "https://";
            if (q.value.indexOf(b) !== 0 && q.value.indexOf(c) !== 0) var d = "error";
            else a && m.src !== a && (m.src = a, m.style.display = "", m.onerror = function() {
                m.removeAttribute("src"), m.style.display = "none", u.setAttribute("disabled", "disabled");
                return
            }, m.onload = function() {
                u.removeAttribute("disabled")
            })
        };
        ZohoDeskEditor.showOverlay(), w = c.saveSelection(), c.win.focus(), l.classList.remove("hide"), d.classList.remove("hide"), w = c.saveSelection(), ZohoDeskEditor._addEvent(document, "keydown", t), ZohoDeskEditor._addEvent(z, "keydown", t), q.onkeyup = q.onblur = B, q.onpaste = q.oncut = function() {
            setTimeout(B, 50)
        }, q.focus()
    } else {
        var C = 0,
            D = 0,
            E = 0;
        x = function() {
            ZohoDeskEditor.hideOverlay(), c.win.focus(), ZohoDeskEditor._removeEvent(document, "keydown", t), ZohoDeskEditor._removeEvent(z, "keydown", t), d.classList.add("hide"), e.classList.add("hide"), u.innerText = "Upload", k.innerHTML = "", _imgDragNDropInput.value = "", ZohoDeskEditor.activeEditor && delete ZohoDeskEditor.activeEditor
        };
        var F = function(a) {
                a.parentNode.removeChild(a)
            },
            G = function(a) {
                c._stopEvent(a);
                var b = a.target.parentElement;
                b.parentElement.getElementsByClassName("ImageUploadDiv").length === 1 && (e.classList.remove("hide"), k.classList.add("hide"), u.innerText = "Upload", u.setAttribute("disabled", "disabled")), b.parentElement.removeChild(b)
            },
            H = function(a, b) {
                c._stopEvent(a);
                var d = imgFiles = b || _imgDragNDropInput.files,
                    f = [],
                    g = d.length,
                    h = 0;
                if (g > 5 || g < 1) {
                    g > 5 && (c.handleAlertMessage ? c.handleAlertMessage("Only 5 files can be uploaded") : alert("Only 5 files can be uploaded"));
                    return
                }
                u.removeAttribute("disabled");
                for (i = 0; i < g; i++)
                    if (d && d[i]) {
                        var j = d[i].name;
                        if (j != "" && /(\.(gif|jpg|jpeg|bmp|png|svg))$/i.test(j) && d[i].size / 1048576 < v) {
                            h === 0 && (k.classList.remove("hide"), e.classList.add("hide"));
                            var l = document.createElement("span");
                            l.className = "ImageUploadDiv", k.appendChild(l);
                            var m = document.createElement("span");
                            m.className = "i-tag icon-close-e", l.appendChild(m);
                            var n = document.createElement("div");
                            n.className = "Image_fixedHeight";
                            var o = document.createElement("span");
                            o.className = "Image_fixedSpan";
                            var p = document.createElement("img");
                            p.src = URL.createObjectURL(d[i]), p.className = "img_upload_preview", o.appendChild(p), n.appendChild(o), l.appendChild(n);
                            var q = document.createElement("div");
                            q.className = "New_Error_mgs hide";
                            var r = document.createElement("span");
                            r.className = "New_Error_text", r.innerText = "Unable To Process", q.appendChild(r), l.appendChild(q);
                            var s = document.createElement("div");
                            s.className = "KB_Editor_InputLabel mt30", l.appendChild(s);
                            var t = document.createElement("input");
                            t.className = "KB_Editor_UploadImage_Desc KB_Editor_AnimateInput", t.type = "text", t.autocomplete = "off", t.placeholder = "Description", s.appendChild(t), y = d, h++, ZohoDeskEditor._addEvent(m, "click", G), ZohoDeskEditor.activeEditor = c
                        }
                    }
                if (h > 0 && h != g) {
                    var w = g - h === 1 ? "one file is not supported" : g - h + " " + "files are not supported";
                    c.handleAlertMessage ? c.handleAlertMessage(w) : alert(w)
                }
            },
            I = function(a) {
                c._stopEvent(a)
            },
            J = function(a) {
                c._stopEvent(a);
                var b = a.dataTransfer.files;
                H(a, b)
            };
        j.onclick = function(a) {
            ZohoDeskEditor_Init.is_ie || (c._stopEvent(a), _imgDragNDropInput.click())
        }, e.ondragenter = I, e.ondragover = I, e.ondrop = J, _imgDragNDropInput.onchange = H, ZohoDeskEditor._addEvent(document, "keydown", t), ZohoDeskEditor._addEvent(z, "keydown", t), ZohoDeskEditor.showOverlay(), w = c.saveSelection(), c.win.focus(), e.classList.remove("hide"), d.classList.remove("hide")
    }
    var K = function(a, b) {
            var d, e = c._getSelection();
            try {
                e.isCollapsed || e.deleteFromDocument(), d = e.getRangeAt(0)
            } catch (f) {
                d = c._createRange(e)
            }
            var g = z.createElement("img");
            g.src = a, g.style.padding = "10px", g.style.maxWidth = "100%", g.style.boxSizing = "border-box";
            if (b) {
                var h = z.createElement("div"),
                    i = z.createElement("SPAN"),
                    j = i.style,
                    k = h.style,
                    l = z.createElement("SPAN");
                l.className = "inner", j.position = "relative", j.display = "block", j.textAlign = "left", j.padding = "0 10px 10px 10px", j.font = "15px/20px 'ProximaNovaRegular',Arial,Helvetica,sans-serif", j.color = "#999", k.margin = "20px", k.borderRadius = "3px", k.border = "1px solid #eee", k.display = "inline-block", h.className = "KB_Editor_ImageDiscBdr", h.setAttribute("contenteditable", "false"), i.className = "KB_Editor_Quotedisc", l.innerText = b, i.appendChild(l), h.appendChild(g), h.appendChild(i);
                var m = z.createElement("div");
                m.className = "target_moving", m.appendChild(h), g = m
            }
            d.insertNode(g), d.selectNode(g), d.collapse(!1), e.removeAllRanges(), e.addRange(d), c.saveCurrentState()
        },
        L = function(a, b) {
            if (b && !b.offsetHeight) return;
            var d = Object.keys(a).length;
            D += 1, b && b ? b.parentElement.childNodes.length === 1 ? x() : b.parentNode.removeChild(b) : "";
            if (d > 0) {
                w && c.restoreSelection(w), c.win.focus();
                for (var e in a) a.hasOwnProperty(e) && (a[e].desc.length < 1 ? K(a[e].url) : K(a[e].url, a[e].desc));
                var f = z.body.lastChild;
                if (f.tagName !== "DIV" || f.firstChild.tagName !== "BR") {
                    var g = z.createElement("DIV");
                    g.appendChild(z.createElement("BR")), z.body.appendChild(g)
                }
            }
        },
        M = function(a) {
            if (!a.offsetHeight) return;
            a.classList.add("Upload_img_error"), a.getElementsByClassName("Docs_Animate_Loading")[0].classList.remove("Docs_Animate_Loading"), a.getElementsByClassName("New_Error_mgs")[0].classList.remove("hide"), errorcount += 1, D + errorcount === E && (u.removeAttribute("disabled"), u.innerText = "Try again")
        };
    A.onclick = function(a) {
        c._stopEvent(a), x()
    }, u.onclick = function(b) {
        var d = [],
            e = [];
        u.setAttribute("disabled", "disabled");
        if (a === "url") {
            var f = m.getAttribute("src");
            if (!f || f.trim().length < 1) return A.click(b), !1;
            var g = m.src,
                h = r.value;
            e[0] = {
                url: g,
                desc: h
            }, L(e), x()
        } else {
            var i = document.getElementsByClassName("ImageUploadDiv"),
                j = document.getElementsByClassName("New_Error_mgs"),
                k = document.getElementsByClassName("img_upload_preview"),
                l = y,
                n = document.getElementsByClassName("KB_Editor_UploadImage_Desc"),
                o = document.getElementsByClassName("Image_fixedHeight"),
                p = k.length,
                q = 0;
            E = p, errorcount = 0, D = 0;
            if (p > 0) {
                for (q = 0; q < p; q++) d[q] = n[q].value;
                for (q = 0; q < p; q++) i[q].classList.remove("Upload_img_error"), j.length && j[0].classList.add("hide"), o[q].classList.add("Docs_Animate_Loading"), c.imageuploadcallback ? c.imageuploadcallback(l[Number(q)], L, M, i[q], d[q]) : A.click()
            }
        }
    }
}, ZohoDeskEditor.prototype.processInlineImages = function(a, b) {
    var c = this,
        d = function() {
            var a = c.toolbardiv.getElementsByClassName("KB_Editor_Progres");
            a && a.length && (a[0].style.display = "none")
        },
        e = function(a) {
            d(), c.squireInstance.insertImage(a, {
                style: "padding:10px;",
                "max-width": "100%",
                "box-sizing": "border-box"
            }), c.saveCurrentState()
        },
        f = function() {
            d(), c.handleAlertMessage ? c.handleAlertMessage("Unable to process the image file") : alert("Unable to process the image file")
        },
        g = b === "drop" ? c.handleInlineDropImage : c.processPastedFile;
    c.createProgressbar(), b === "drop" ? g(a, e, f) : b === "customPaste" ? g(a, "blob", e, f) : g(a, "dataURI", e, f)
}, ZohoDeskEditor.prototype.removeResize = function() {
    var a = this,
        b = a.doc.getElementById("resizeablewrapper"),
        c = a.doc.getElementById("wrapperbottom");
    b && (b.parentNode.removeChild(b), c.parentNode.removeChild(c))
}, ZohoDeskEditor.prototype.resizeimage = function(a, b) {
    var c = this,
        d = c.doc,
        e = c.win,
        f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A = "none",
        B = "",
        C = "",
        D, E = b.style.width,
        F = b.style.height;
    b.style.width = "", b.style.height = "", B = b.offsetWidth, C = b.offsetHeight, b.style.width = E || B + "px", b.style.height = F || C + "px", f = function(a) {
        if (b.className.indexOf("docsimage") < 0) {
            var d = (Math.random() + "").replace("0.", ""),
                e = "img_" + d;
            b.setAttribute("data-zdeskdocid", e), b.parentElement.className.indexOf("KB_Editor_ImageDiscBdr") >= 0 && b.parentElement.setAttribute("id", "desc_" + e), b.getAttribute("data-zdeskdocselectedclass") || (b.classList.add("docsimage"), b.setAttribute("data-zdeskdocselectedclass", "original"))
        } else b.parentElement.className.indexOf("KB_Editor_ImageDiscBdr") >= 0 && b.parentElement.setAttribute("id", "desc_" + b.getAttribute("data-zdeskdocid"));
        c._stopEvent(a), h()
    }, z = function(a) {
        if (a) {
            var b = a.getBoundingClientRect();
            return {
                top: b.top + e.pageYOffset,
                left: b.left + e.pageXOffset
            }
        }
        return {
            top: 0,
            left: 0
        }
    }, g = function() {
        var a = d.createDocumentFragment();
        o = d.createElement("div"), o.id = "resizeablewrapper", o.setAttribute("contenteditable", "false"), a.appendChild(o), p = d.createElement("div"), p.id = "wrapperbottom", p.className = "spancls", p.setAttribute("contenteditable", "false"), a.appendChild(p), t = d.createElement("span"), t.id = "contentSpan", t.setAttribute("span-type", "small"), t.innerText = "Small", p.appendChild(t), u = d.createElement("span"), u.id = "contentSpan", u.setAttribute("span-type", "best"), u.innerText = "Best", p.appendChild(u), v = d.createElement("span"), v.id = "contentSpan", v.setAttribute("span-type", "original"), v.innerText = "Original", p.appendChild(v), x = d.createElement("span"), x.id = "contentSpan", x.innerText = "Remove", p.appendChild(x), d.body.appendChild(a), q = o.style, r = p.style, s = b.style, ZohoDeskEditor._addEvent(o, "mousedown", w), ZohoDeskEditor._addEvent(o, "mousemove", y), ZohoDeskEditor._addEvent(o, "mouseover", y), ZohoDeskEditor._addEvent(document, "mousedown", D), ZohoDeskEditor._addEvent(t, "click", k), ZohoDeskEditor._addEvent(u, "click", l), ZohoDeskEditor._addEvent(v, "click", m), ZohoDeskEditor._addEvent(x, "click", n)
    }, y = function(a) {
        var d = a.pageX,
            e = a.pageY,
            f = z(b);
        Math.abs(d - (f.left + b.offsetWidth)) <= 20 && Math.abs(e - (f.top + b.offsetHeight)) <= 20 ? (A = "both", q.cursor = "se-resize") : Math.abs(d - (f.left + b.offsetWidth)) <= 20 ? (A = "width", q.cursor = "ew-resize") : Math.abs(e - (f.top + b.offsetHeight)) <= 20 ? (A = "height", q.cursor = "ns-resize") : c.needDraggableImage ? (A = "move", q.cursor = "move") : (A = "none", q.cursor = "text")
    }, w = function(a) {
        c._stopEvent(a);
        var e = a.pageX,
            f = a.pageY;
        A !== "none" && A !== "move" ? (ZohoDeskEditor._removeEvent(o, "mousemove", y), ZohoDeskEditor._removeEvent(o, "mouseover", y), ZohoDeskEditor._addEvent(d.body, "mousemove", i), ZohoDeskEditor._addEvent(o, "mousemove", i), ZohoDeskEditor._addEvent(o, "mouseup", removeResizeEvent), ZohoDeskEditor._addEvent(d.body, "mouseup", removeResizeEvent), ZohoDeskEditor._addEvent(b, "mouseup", removeResizeEvent)) : A === "move" && (ZohoDeskEditor._removeEvent(o, "mousemove", y), ZohoDeskEditor._removeEvent(o, "mouseover", y), removeResizeEvent(a), D(a), c.dragImageInsideEditor(a, b))
    }, D = function(a) {
        removeResizeEvent(a), ZohoDeskEditor._removeEvent(document, "mousedown", D), c.removeResize()
    }, removeResizeEvent = function(a) {
        c._stopEvent(a), ZohoDeskEditor._removeEvent(d.body, "mousemove", i), ZohoDeskEditor._removeEvent(d.body, "mouseup", removeResizeEvent), ZohoDeskEditor._removeEvent(o, "mousemove", i), ZohoDeskEditor._removeEvent(o, "mouseup", removeResizeEvent), ZohoDeskEditor._addEvent(o, "mousemove", y), ZohoDeskEditor._removeEvent(b, "mouseup", removeResizeEvent)
    }, i = function(a) {
        c._stopEvent(a);
        var d = z(b);
        if (A === "none") return;
        var e = a.pageX - d.left,
            f = a.pageY - d.top;
        e = e > 20 ? e : 20, f = f > 20 ? f : 20;
        if (A === "width" || A === "both") s.width = e + "px";
        if (A === "height" || A === "both") s.height = f + "px";
        q.top = d.top + "px", q.left = d.left + "px", q.height = b.offsetHeight + "px", q.width = b.offsetWidth + "px", r.width = o.offsetWidth + "px", r.left = d.left + "px", r.top = d.top + o.offsetHeight + 3 + "px", b.setAttribute("data-zdeskdocselectedclass", ""), updateSpanOption()
    }, h = function() {
        var a = b.getAttribute("data-zdeskdocid"),
            c = z(b);
        o = d.getElementById("resizeablewrapper");
        if (o && o.getAttribute("data-divId") == a) return;
        p = d.getElementById("wrapperbottom"), o && (o.parentNode.removeChild(o), p.parentNode.removeChild(p)), g();
        var e = b.getAttribute("data-zdeskdocselectedclass");
        e === "best" ? l() : e === "small" && k(), o.setAttribute("data-divId", b.getAttribute("data-zdeskdocid")), q.left = c.left + "px", q.top = c.top + "px", q.width = b.offsetWidth + "px", q.height = b.offsetHeight + "px", r.left = c.left + "px", r.top = c.top + b.offsetHeight + 3 + "px", r.width = b.offsetWidth + "px", updateSpanOption(), q.display = "block", r.display = "block"
    }, updateSpanOption = function() {
        var a = p.getElementsByClassName("selectedSpan")[0],
            c = b.getAttribute("data-zdeskdocselectedclass");
        a && a.classList.remove("selectedSpan"), c && p.querySelectorAll("[span-type='" + c + "']")[0].classList.add("selectedSpan")
    }, j = function(a, c, d, e) {
        var f = z(b);
        q.left = f.left + "px", q.top = f.top + "px", q.width = b.offsetWidth + "px", q.height = b.offsetHeight + "px", r.left = f.left + "px", r.top = f.top + o.offsetHeight + 3 + "px", r.width = o.offsetWidth + "px", updateSpanOption()
    }, k = function(a, c) {
        b.style.width = B * .25 + "px", b.style.height = C * .35 + "px", b.setAttribute("data-zdeskdocselectedclass", "small"), j()
    }, l = function(a, c) {
        b.style.width = B * .5 + "px", b.style.height = "auto", b.setAttribute("data-zdeskdocselectedclass", "best"), j()
    }, m = function(a, c) {
        b.style.width = "", b.style.height = "", b.setAttribute("data-zdeskdocselectedclass", "original"), j()
    }, n = function() {
        var a = b.parentElement.nodeName === "A" ? b.parentElement.parentElement : b.parentElement;
        a.className === "KB_Editor_ImageDiscBdr" ? a = a.parentElement.className.indexOf("target_moving") >= 0 ? a.parentElement : a : a.className === "target_moving" ? a = b.parentElement : a = b, a.parentNode.removeChild(a), o.parentNode.removeChild(o), p.parentNode.removeChild(p)
    }, f(a)
}, ZohoDeskEditor.prototype.dragImageInsideEditor = function(a, b) {
    var c = this,
        d = c.doc,
        e = c.win,
        f = b,
        g, h, i, j = f.style,
        k, l, m = f.getAttribute("data-zdeskdocid"),
        n = d.getElementById("target_mov_" + m),
        o = d.getElementById("desc_" + m),
        p = c.outerdiv.offsetWidth / 3,
        q = d.createElement("div");
    n ? f = n : o && (f = o), j = f.style, q.className = "target_moving";
    if (f.id.indexOf("target_mov_") < 0) {
        var r = undefined;
        if (f.nodeName === "IMG") r = f.getAttribute("align");
        else {
            var s = f.getElementsByTagName("IMG")[0];
            r = s.getAttribute("align")
        }
        r && (r = r === "left" || r === "right" ? "target_moving_" + r : "", r === "left" ? q.style.float = "left" : r === "right" ? q.style.float = "right" : r === "middle" && (q.align = "middle"), r && r.length && f.removeAttribute("align")), q.id = "target_mov_" + m, f.insertAdjacentElement("beforebegin", q), f = f.parentElement.nodeName === "A" ? f.parentElement : f, q.appendChild(f), f = q, j = f.style
    }
    g = function() {
        ZohoDeskEditor._addEvent(d, "mousemove", i), ZohoDeskEditor._addEvent(d, "mouseup", h)
    }, i = function(a) {
        clearTimeout(l), l = setTimeout(function() {
            if (a.target && a.target !== f && a.target !== d.body.parentElement) try {
                a.target.insertAdjacentElement("afterbegin", f)
            } catch (b) {}
        }, 0), f.removeAttribute("align"), f.removeAttribute("style");
        if (a.pageX <= p) j.float = "left";
        else if (a.pageX <= p * 2) try {
            f.setAttribute("align", "middle")
        } catch (b) {} else j.float = "right"
    }, h = function(a) {
        c._stopEvent(a), d.body.style.cursor = "";
        var b = d.getElementsByClassName("target_moving");
        for (var e = 0; e < b.length; e += 1) b[e].childNodes.length === 0 && (b[e].parentNode.removeChild(b[e]), e -= 1);
        k()
    }, k = function() {
        ZohoDeskEditor._removeEvent(d, "mousemove", i), ZohoDeskEditor._removeEvent(d, "mouseup", h)
    }, d.body.style.cursor = "move", g()
}, ZohoDeskEditor.prototype.showInsertHTMLDialog = function(a) {
    "use strict";
    var b = this,
        c = document,
        d = b.doc.getElementById("ze_ins_insertHtml"),
        e = ZohoDeskEditor.i18n,
        f, g, h, i, j, k, l = function() {
            return ['<div class="zep_PUtt">' + e("Insert HTML") + '<i class="zei-close"></i></div>', '<div class="zep_PUcen">', '<table class="ze_ptble">', "<tbody>", "<tr>", "<td>", '<textarea style="width:500px;height:250px;resize:none;">', "</textarea>", "</td>", "</tr>", "</tbody>", "</table>", "</div>", '<div class="zep_PUbtm">', '<span class="sel">' + e("OK") + "</span>", '<span data-val="Cancel">' + e("Cancel") + "</span>", "</div>"].join("")
        },
        m = function() {
            c.removeEventListener("keydown", k, !0), d.parentNode.removeChild(d), ZohoDeskEditor.hideOverlay()
        };
    k = function(a) {
        a.keyCode === 27 && (b._stopEvent(a), m())
    };
    var n = function() {
        var a = h.value,
            c;
        m(), b.insertHTML(a)
    };
    if (d) return;
    ZohoDeskEditor.showOverlay(), d = c.createElement("div"), d.id = "ze_ins_insertHtml", d.className = "zep_PU zep_arrb", d.innerHTML = l(), c.body.appendChild(d), ZohoDeskEditor.setPosition(d, b.outerdiv), h = d.getElementsByTagName("textarea")[0], f = d.getElementsByClassName("zei-close")[0], g = d.getElementsByTagName("span"), i = g[0], j = g[1], h.focus(), j.onclick = f.onclick = function(a) {
        b._stopEvent(a), m()
    }, i.onclick = function(a) {
        b._stopEvent(a), n()
    }, ZohoDeskEditor._addEvent(c, "keydown", k)
}, ZohoDeskEditor.getHookMethod = function(a, b) {
    "use strict";
    if (typeof b == "function") return function(c, d, e) {
        e.originator && e.originator === a && b(c, d)
    }
}, ZohoDeskEditor.addHook = function(a, b) {
    "use strict";
    if (typeof b == "function") {
        var c = NewDOMPurify || window.NewDOMPurify || editorModule && editorModule.exports;
        c.addHook(a, b)
    }
}, ZohoDeskEditor.removeHook = function(a, b) {
    "use strict";
    if (typeof b == "function") {
        var c = NewDOMPurify || window.NewDOMPurify || editorModule && editorModule.exports;
        c.removeHook(a, b)
    }
}, ZohoDeskEditor.prototype.createLink = function() {
    "use strict";
    var a = this,
        b = document,
        c = b.getElementById("ze_link"),
        d = ZohoDeskEditor.i18n,
        e = a._getSelectedText(),
        f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y = !0,
        z;
    for (r = a.getParentElement(); r !== null && r.nodeName !== "BODY"; r = r.parentNode) {
        y && r.children.length && r.getElementsByTagName("IMG").length === 1 && (r = r.getElementsByTagName("IMG")[0]);
        if (r.nodeName === "A") {
            q = !0;
            break
        }
        if (r.nodeName === "IMG") {
            s = !0, r.parentNode.nodeName === "A" && (q = !0, r = r.parentNode);
            break
        }
        y = !1
    }
    var A = function() {
        var a = c.getElementsByTagName("form")[0];
        ZohoDeskEditor._removeEvent(b, "keydown", x), c.parentNode.removeChild(c), ZohoDeskEditor.hideOverlay(), a && a.reset()
    };
    x = function(b) {
        b.keyCode === 27 && (a._stopEvent(b), A()), b.keyCode === 13 && (a._stopEvent(b), z(b))
    };
    var B = function() {
            g.checked = !0, h.checked = !1, o.style.display = p.style.display = "none", n.style.display = ""
        },
        C = function() {
            g.checked = !1, h.checked = !0, n.style.display = "none", o.style.display = p.style.display = ""
        },
        D = function() {
            g.checked && (s || e) ? j.focus() : h.checked && (s || e) ? k.focus() : i.focus()
        },
        E = function(b, c) {
            var d, e, f;
            a.doc.execCommand("createlink", !1, b);
            try {
                d = a._getSelection(), d.collapseToEnd(), f = a.getParentElement(), f.tagName === "A" && (ZohoDeskEditor_Init.preventTargetBlank || (f.target = "_blank", a.initobj.anchorReferer && (f.rel = "noreferrer")), f.textContent !== c && !f.getElementsByTagName("img") && (f.textContent = c), e = a._createRange(d), e.selectNode(f), d.removeAllRanges(), d.addRange(e), d.collapseToEnd())
            } catch (g) {
                a.range && (a.range.select(), delete a.range), a.doc.execCommand("createlink", !1, b), f = a.getParentElement(), f.tagName === "A" && (ZohoDeskEditor_Init.preventTargetBlank || (f.target = "_blank", a.initobj.anchorReferer && (f.rel = "noreferrer")), f.innerText !== c && !f.getElementsByTagName("img") && (f.innerText = c), d = a._getSelection(), e = a._createRange(d), e.moveToElementText(f), e.collapse(!1), e.select())
            }
            var h = a.doc.createRange();
            h.setStart(f, 0), h.setEndAfter(f), h.selectNode(f);
            var i = a.iframe.contentWindow.getSelection();
            i.removeAllRanges(), i.addRange(h), a.win.focus(), a.iframe.contentWindow.getSelection().collapseToEnd(), a.saveCurrentState()
        },
        F = function() {
            var a, b, d, t;
            f = c.getElementsByTagName("input"), g = f[0], h = f[1], i = f[2], j = f[3], k = f[4], l = f[5], u = c.getElementsByTagName("span"), v = c.getElementsByClassName("zei-close")[0], a = c.getElementsByTagName("tr"), m = a[1], n = a[2], o = a[3], p = a[4], s ? m.style.display = "none" : m.style.display = "", q ? (s || (i.value = r.textContent), r.protocol === "mailto:" ? (C(), b = r.href, d = b.split("mailto:"), t = d[1].split("?subject="), k.value = t[0] || "", l.value = t[1] || "") : (B(), j.value = r.href)) : (B(), s || (i.value = e || ""))
        },
        G = new RegExp("^[\\w]([\\w-\\.\\+\\']*)@([\\w\\-\\.]*)(\\.[a-zA-Z]{2,22}(\\.[a-zA-Z]{2}){0,2})$"),
        H = new RegExp("^(ht|f)tp(s?)\\:\\/\\/[-.\\w]*(\\/?)([a-zA-Z0-9\\-\\.\\?\\,\\:\\'\\/\\\\\\+=&amp;%\\$#_@]*)?$"),
        I = ZohoDeskEditor.trim(e);
    if (G.test(I) && !q) {
        E("mailto:" + I, I);
        return
    }
    if (H.test(I) && !q) {
        E(I, I);
        return
    }
    ZohoDeskEditor.showOverlay(), a.win.focus(), w = a.saveSelection(), t = '<div class="zdeskEditor_PUheader">' + d("Insert Link") + '<i class="zei-close"></i></div>', t += '<div class="zdeskEditor_PUbody">', t += '<form><table class="ze_ptble">', t += '<tr class="mb30"><td>' + d("Link") + '</td><td><input type="radio" id="ze_link_url" checked="true"/><label for="ze_link_url">' + d("URL") + '</label><input id="ze_link_email" type="radio"/><label for="ze_link_email">' + d("Email") + "</label></td>", t += "<tr><td>" + d("Selected text") + '&nbsp;</td><td><input type="text"></td></tr>', t += "<tr><td>" + d("Web address") + '</td><td><input type="text"></td></tr>', t += '<tr style="display:none;"><td>' + d("Email address") + '</td><td><input type="text"></td></tr>', t += '<tr style="display:none;"><td>' + d("Subject") + '</td><td><input type="text"></td></tr>', t += "</table></form></div>", t += '<div class="zdeskEditor_PUbtm"><span class="blue-btn">' + d("OK") + '</span><span class="btn" data-val="Cancel">' + d("Cancel") + "</span></div></div>";
    var J = b.createElement("div");
    J.className = "zdeskEditor_popup", J.innerHTML = t, J.id = "ze_link", document.body.appendChild(J), c = J, F(), ZohoDeskEditor.setPosition(c, a.outerdiv), D(), g.onclick = function() {
        B(), D()
    }, h.onclick = function() {
        C(), D()
    }, v.onclick = u[1].onclick = function(b) {
        a._stopEvent(b), A()
    }, z = function(b) {
        var c = "http://",
            f = "https://";
        a._stopEvent(b);
        var m = i.value,
            n, o, p, t, u, v;
        w && a.restoreSelection(w), g.checked ? (n = j.value, n = ZohoDeskEditor.trim(n)) : h.checked && (n = k.value, n = ZohoDeskEditor.trim(n)), o = l.value;
        if (q)
            if (!n) confirm("Please confirm that you want to unlink this element.\n\nLink points to: " + decodeURI(r.href)) && (p = a._getSelection(), t = a._createRange(p), t.selectNode(r), a.doc.execCommand("unlink", !1, null), A());
            else {
                g.checked ? n.indexOf(c) !== 0 && n.indexOf(f) !== 0 && n.indexOf("ftp://") !== 0 && n.indexOf("ssh://") !== 0 && (n = c + n) : h.checked && (n = "mailto:" + n, o && (n += "?subject=" + o)), r.href = n, ZohoDeskEditor_Init.preventTargetBlank || (r.target = "_blank", a.initobj.anchorReferer && (r.rel = "noreferrer")), !s && r.textContent !== m && (r.textContent = m), t = a.doc.createRange(), t.setStart(r, 0), t.setEndAfter(r), t.selectNode(r);
                var x = a.iframe.contentWindow.getSelection();
                x.removeAllRanges(), x.addRange(t), a.win.focus(), w && a.restoreSelection(w), a.saveCurrentState()
            }
        else {
            m = ZohoDeskEditor.trim(m);
            if (!m && !s) {
                var y = d("You must Select or ENTER Some text to create link");
                return a.handleAlertMessage ? a.handleAlertMessage(y) : alert(y), i.focus(), !1
            }
            if (g.checked) {
                if (!n) {
                    var y = d("Please enter URL to make a link");
                    return a.handleAlertMessage ? a.handleAlertMessage(y) : alert(y), j.focus(), !1
                }
                n.indexOf(c) !== 0 && n.indexOf(f) !== 0 && n.indexOf("ftp://") !== 0 && n.indexOf("ssh://") !== 0 && (n = c + n)
            } else if (h.checked) {
                if (!n) {
                    var y = d("Please enter Email to make a link");
                    return a.handleAlertMessage ? a.handleAlertMessage(y) : alert(y), k.focus(), !1
                }
                n = "mailto:" + n, o && (n += "?subject=" + o)
            }
            if (s) {
                a.doc.execCommand("createlink", !1, n), p = a._getSelection(), p.collapseToEnd(), u = a.getParentElement(), u && u.tagName.toLowerCase() === "a" && (ZohoDeskEditor_Init.preventTargetBlank || (u.target = "_blank", a.initobj.anchorReferer && (u.rel = "noreferrer")));
                var z = u.parentElement;
                t = a._createRange(p), t.selectNode(z), p.removeAllRanges(), p.addRange(t), p.collapseToEnd()
            } else if (e && e.length !== 0) E(n, m);
            else {
                var B = "<a id='an_link'";
                ZohoDeskEditor_Init.preventTargetBlank || (B += "target='_blank'", a.initobj.anchorReferer && (B += "rel='noreferrer'")), B += "></a>", a.win.focus(), a.pasteHTML(B), v = a.doc.getElementById("an_link"), v && (v.appendChild(a.doc.createTextNode(m)), v.setAttribute("href", n), v.setAttribute("target", "_blank"), v.removeAttribute("id")), a.saveCurrentState()
            }
        }
        return A(), !1
    }, u[0].onclick = z, ZohoDeskEditor._addEvent(b, "keydown", x)
}, ZohoDeskEditor.prototype.showAnchorTag = function(a) {
    "use strict";
    var b = a,
        c = this,
        d = document,
        e = ZohoDeskEditor.i18n,
        f, g, h, i, j, k, l, m, n, o, p = c.saveSelection();
    f = function(b) {
        g = document.getElementById("ze_linkBlock");
        if (b) {
            a = b.target;
            for (; a !== null; a = a.parentNode)
                if (a === g) break
        }
        a || h()
    }, i = function() {
        h()
    }, h = function() {
        g = document.getElementById("ze_linkBlock"), g && (document.body.removeChild(g), ZohoDeskEditor._removeEvent(d, "mousedown", f), ZohoDeskEditor._removeEvent(c.doc, "mousedown", f), ZohoDeskEditor._removeEvent(c.doc, "keydown", i))
    }, j = function() {
        var a = c.doc.createRange();
        a.setStart(b, 0), a.setEndAfter(b), a.selectNode(b);
        var d = c.iframe.contentWindow.getSelection();
        d.removeAllRanges(), d.addRange(a), c.win.focus(), p && c.restoreSelection(p)
    }, k = function() {
        var a = c.doc.createRange();
        a.setStart(b, 0), a.setEndAfter(b), a.selectNode(b);
        var d = c.iframe.contentWindow.getSelection();
        d.removeAllRanges(), d.addRange(a), c.win.focus(), c.doc.execCommand("unlink", !1, null), c.iframe.contentWindow.getSelection().collapseToStart(), h(), c.saveCurrentState()
    }, l = function() {
        var a = document.getElementById("ze_linkBlock"),
            d = ZohoDeskEditor.getPos(c.outerdiv),
            e = a.style,
            f = document,
            g = document.body,
            h = f.documentElement,
            i = 0,
            j = 0,
            k = c.iframe.getBoundingClientRect(),
            l = b.getBoundingClientRect(),
            n = document.body.getBoundingClientRect().width,
            o;
        i = k.left + l.left, j = k.top + l.top + b.offsetHeight + (Math.max(g.scrollTop, h.scrollTop) || 0), e.left = parseInt(i) + "px", e.top = parseInt(j) + "px", e.right = "auto", o = i + a.offsetWidth;
        if (o >= n) {
            var p = m.innerHTML;
            p.length > 55 && (p = p.substring(0, 54) + "..."), m.innerHTML = p
        }
        j + a.offsetHeight > c.outerdiv.offsetHeight + d.offsetTop && (e.top = "auto", j = window.innerHeight - j + b.offsetHeight, e.bottom = parseInt(j) + "px"), a.getElementsByTagName("A")[0].style.maxWidth = .6 * c.outerdiv.offsetWidth + "px"
    }, g = document.getElementById("ze_linkBlock"), g && h(), n = document.createElement("span"), n.id = "ze_linkBlock", n.className = "ze_Link_spell", m = document.createElement("a"), b.href.indexOf("mailto") < 0 && c.initobj.anchorReferer && (m.rel = "noreferrer"), m.setAttribute("href", b.href), o = document.createElement("span"), o.innerHTML = e("Go to:"), m.appendChild(c.doc.createTextNode(b.href)), m.target = "_blank", n.appendChild(m);
    var q = document.createElement("span");
    q.className = "KBEditortools-pen2";
    var r = document.createElement("span");
    r.className = "KBEditortools-removelink-black", n.appendChild(o), n.appendChild(m), n.appendChild(q), n.appendChild(r), document.body.appendChild(n), l(), ZohoDeskEditor._addEvent(r, "click", k), ZohoDeskEditor._addEvent(q, "click", function() {
        p && c.restoreSelection(p), c.win.focus(), c.createLink(b), h()
    }), c.updateToolbar(), ZohoDeskEditor._addEvent(d, "mousedown", f), ZohoDeskEditor._addEvent(c.doc, "mousedown", f), ZohoDeskEditor._addEvent(c.doc, "keydown", i)
}, ZohoDeskEditor.prototype.createTable = function(a) {
    function r(c) {
        b._stopEvent(c);
        var g, h, i, l, m, o, p, r, s, t, u, v, w, x, y, z, A, B, C = b.initobj,
            D = ZohoDeskEditor_Init.outGoingFontFamily,
            E, F, G, H, I;
        n && b.restoreSelection(n), g = k.value;
        if (g > 0 && g < 100) {
            h = j[1], i = h.value;
            if (i > 0 && i < 100) {
                l = j[2], m = l.value;
                if (m > 1 && m < 1e4) {
                    o = j[3];
                    if (a) {
                        F = j[3], H = F.value;
                        if (!(H != "" && H >= 0 && H < 100)) return q(e("Specify valid number for Cell Padding")), F.focus(), F.select(), !1;
                        G = j[4], I = G.value;
                        if (!(I != "" && I >= 0 && I < 100)) return q(e("Specify valid number for Cell Spacing")), G.focus(), G.select(), !1;
                        o = j[5]
                    }
                    p = o.value;
                    if (p != "" && p >= 0 && p < 100) {
                        r = b.doc, s = d.getElementsByTagName("select")[0];
                        if (a) E = a.style, a.width && (a.width = ""), E.width = m + s.options[s.selectedIndex].value, a.style.border && (a.style.border = ""), a.border = p, a.cellPadding = H, a.cellSpacing = I, b.win.focus();
                        else {
                            t = r.createDocumentFragment(), t.appendChild(r.createElement("br")), u = r.createElement("table"), E = u.style, E.width = m + s.options[s.selectedIndex].value, E.fontSize = C.defaultfontsize || ZohoDeskEditor_Init.defaultFontSize || "", E.fontFamily = C.defaultfontfamily || ZohoDeskEditor_Init.defaultFontFamily || "", u.cellPadding = "0", u.cellSpacing = "0", u.border = p, changeColor = function() {
                                var a = "from changeColor";
                                b.handleAlertMessage ? b.handleAlertMessage(a) : alert(a)
                            }, v = r.createElement("tbody");
                            for (w = 0; w < g; w++) {
                                y = r.createElement("tr");
                                for (x = 0; x < i; x++) {
                                    z = r.createElement("td");
                                    var J = r.createElement("div");
                                    J.appendChild(r.createElement("br")), z.appendChild(J), y.appendChild(z)
                                }
                                v.appendChild(y)
                            }
                            u.appendChild(v), t.appendChild(u), t.appendChild(r.createElement("br")), b.win.focus(), A = b._getSelection(), B;
                            try {
                                A.isCollapsed || A.deleteFromDocument(), B = A.getRangeAt(0)
                            } catch (K) {
                                B = b._createRange(A)
                            }
                            try {
                                B.insertNode(t)
                            } catch (L) {
                                q(e("Exception in inserting table"))
                            }
                        }
                        return f(), b.saveCurrentState(), !1
                    }
                    return q(e("Specify valid number for Border")), o.focus(), o.select(), !1
                }
                return q(e("Specify valid number for Width")), l.focus(), l.select(), !1
            }
            return q(e("Specify valid number for Columns")), h.focus(), h.select(), !1
        }
        return q(e("Specify valid number for Rows")), k.focus(), k.select(), !1
    }
    var b = this,
        c = document,
        d = c.getElementById("ze_ins_table"),
        e = ZohoDeskEditor.i18n,
        f, g, h, i, j, k, l, m, n, o, p;
    f = function() {
        var a = d.getElementsByTagName("form")[0];
        c.removeEventListener("keydown", g, !0), d.parentNode.removeChild(d), ZohoDeskEditor.hideOverlay(), a && a.reset(), b.win.focus(), b.range && (b.range.select(), delete b.range)
    }, initialize = function() {
        var b, c, e, f, g, h, i, l, m, n, o;
        k.value = a.rows.length, k.disabled = !0, c = j[1], c.value = a.rows[0].cells.length, c.disabled = !0, f = j[2], l = a.style.width || a.width, m = d.getElementsByTagName("select")[0], l.indexOf("%") != -1 ? m.selectedIndex = "0" : m.selectedIndex = "1", l && (f.value = parseInt(l)), f.focus(), n = j[3], a.cellPadding ? n.value = a.cellPadding : n.value = "0", o = j[4], a.cellSpacing ? o.value = a.cellSpacing : o.value = "0", h = j[5], i = a.style.border || a.border, i ? h.value = parseInt(i) : h.value = "0"
    }, g = function(a) {
        a.keyCode === 27 && (b._stopEvent(a), f()), a.keyCode === 13 && (b._stopEvent(a), r(a))
    }, a ? o = "Edit Table" : o = "Insert Table", h = '<div class="zdeskEditor_PUheader">' + e(o) + '<i class="zei-close"></i></div>', h += '<div class="zdeskEditor_PUbody">', h += '<form><table class="ze_ptble New_Table_popup"><tr><td>' + e("Rows") + '</td><td><input type="text" class="ze_m20" value="2" maxlength="2" size="2"></td></tr><tr><td>' + e("Columns") + '</td><td><input type="text" value="2" maxlength="2" size="2"></td></tr>', h += "<tr><td>" + e("Width") + '</td><td><input type="text" value="100" maxlength="4" size="2"/></td></tr><tr><td colspan="2"><div class="ze_select"><select class="select"><option value="%">%</option><option value="px">' + e("px") + "</option></select></div></td></tr>", a && (h += "<tr><td>" + e("Cell Padding") + '</td><td><input type="text" maxlength="2" size="2"/></td><td>' + e("Cell Spacing") + '</td><td><input type="text" maxlength="2" size="2"/></td></tr>'), h += "<tr><td>" + e("Border") + '</td><td><input type="text" value="1" maxlength="2" size="2"/></td></tr>', h += '<tr><td></td></tr><tr><td colspan="4"><p class="ze_iiSnF"><span class="ze_popuperrmsg"style="display:none;">this is temp text</span></p></td></tr></table></form></div>', h += '<div class="zdeskEditor_PUbtm"><span class="blue-btn">' + e("OK") + '</span><span class="btn">' + e("Cancel") + "</span></div>", ZohoDeskEditor.showOverlay(), b.win.focus(), n = b.saveSelection(), i = c.createElement("div"), i.setAttribute("class", "zdeskEditor_popup zep_arrb"), i.innerHTML = h, i.id = "ze_ins_table", d = i, document.body.appendChild(i), ZohoDeskEditor.setPosition(d, b.outerdiv), j = d.getElementsByTagName("input"), k = j[0], l = d.getElementsByTagName("span"), p = l[0], m = d.getElementsByClassName("zei-close")[0], a ? initialize() : k.focus(), m.onclick = l[2].onclick = function(a) {
        b._stopEvent(a), f()
    };
    var q = function(a) {
        p = d.getElementsByTagName("span"), p[0].style.display = "", p[0].innerHTML = a
    };
    l[1].onclick = r, ZohoDeskEditor._addEvent(c, "keydown", g)
}, ZohoDeskEditor.prototype.insertObj = function() {
    var a = this,
        b = document,
        c = b.getElementById("ze_ins_obj"),
        d, e = ZohoDeskEditor.i18n,
        f, g, h, i, j, k;
    ZohoDeskEditor.showOverlay(), f = function() {
        c.style.display = "none", d.value = "", ZohoDeskEditor.hideOverlay(), a.win.focus(), b.removeEventListener("keydown", g, !0)
    }, g = function(b) {
        b.keyCode === 27 && (a._stopEvent(b), f())
    }, c ? c.style.display = "" : (h = "<div class='zdeskEditor_PUheader'>", h += e("Insert HTML") + "<i class='zei-close'></i></div>", h += '<div class="zdeskEditor_PUbody"><span><textarea class="ze_objecttxt"></textarea></span></div>', h += '<div class="zdeskEditor_PUbtm"><input type="submit" class="blue-btn" value=' + e("Insert") + ' /><input type="submit" class="btn" value=' + e("Cancel") + " /></div>", i = b.createElement("div"), i.className = "zdeskEditor_popup", i.innerHTML = h, i.id = "ze_ins_obj", document.body.appendChild(i), c = i), ZohoDeskEditor.setPosition(c, a.outerdiv), d = c.getElementsByTagName("textarea")[0], d.focus(), k = c.getElementsByTagName("input"), j = c.getElementsByTagName("i")[0], j.onclick = k[1].onclick = function(b) {
        a._stopEvent(b), f()
    }, k[0].onclick = function(b) {
        a._stopEvent(b);
        var c = d.value;
        c = ZohoDeskEditor.trim(c);
        if (c.length === 0) {
            var g = e("Please Enter some HTML");
            return a.handleAlertMessage ? a.handleAlertMessage(g) : alert(g), d.focus(), !1
        }
        a.win.focus(), a.insertHTML(c, !0), a.styletext && a.insertTOC(), f()
    }, b.addEventListener("keydown", g, !0)
}, ZohoDeskEditor.prototype.insertCode = function() {
    var a = this,
        b, c, d, e, f, g, h, i, j;
    a.doc.execCommand("insertorderedlist", !1, " "), b = a.win.getSelection(), c = b.anchorNode, j = function(a) {
        var b = a.style;
        a.removeAttribute("style"), b.listStylePosition = "outside", b.listStyleType = "decimal", b.padding = "0 30px"
    };
    if (c.nodeName === "OL") {
        j(c);
        return
    }
    d = !1;
    for (; c !== null && c.nodeName !== "BODY"; c = c.parentNode)
        if (c.nodeName === "OL") {
            j(c), d = !0;
            break
        }
    if (c.nodeName === "LI") {
        var k = c.style;
        c.removeAttribute("style"), k.backgroundColor = "#f5f5f5", k.borderLeft = "2px solid #ccc", k.margin = "1px", k.padding = "2px"
    } else {
        var l = c.getElementsByTagName("LI");
        if (l && l.length > 0)
            for (var i = 0; i < l.length; i += 1) {
                var m = l[i],
                    k = m.style;
                m.removeAttribute("style"), k.backgroundColor = "#f5f5f5", k.borderLeft = "2px solid #ccc", k.margin = "1px", k.padding = "2px"
            }
    }
    if (!d) {
        e = b.getRangeAt(0), f = e.commonAncestorContainer;
        if (f.nodeType !== 1)
            for (; f !== null && f.nodeName !== "BODY"; f = f.parentNode)
                if (f.nodeType === 1) break;
        if (f.nodeType === 1) {
            g = f.getElementsByTagName("ol"), h = g.length;
            for (i = 0; i < h; i++)
                if (b.containsNode(g[i], !0)) {
                    j(g[i]);
                    break
                }
        }
    }
}, ZohoDeskEditor.prototype.insertQuote = function() {
    var a = this,
        b = a.doc,
        c, d, e, f, g, h, i, j;
    i = a.getContent(), a.squireInstance.focus(), j = a.win.getSelection().anchorNode.parentNode;
    while (j !== null) {
        if (j.nodeName === "BLOCKQUOTE") return !0;
        j = j.parentNode
    }
    c = a._getSelection(), d = a._createRange(c), e = b.createDocumentFragment();
    var k = b.createElement("div");
    k.appendChild(b.createElement("br")), e.appendChild(k), f = b.createElement("blockquote"), e.appendChild(f), g = b.createElement("div"), f.appendChild(g), e.appendChild(b.createElement("br")), ZohoDeskEditor_Init.inlineQuotes ? (f.style.border = "1px solid #CCCCCC", f.style.padding = "7px", f.style.backgroundColor = "#F5F5F5") : f.className = "block_quote";
    if (c.isCollapsed) g.appendChild(b.createElement("br")), d.insertNode(e), d.selectNodeContents(g), d.collapse(!0), c.removeAllRanges(), c.addRange(d);
    else {
        g.appendChild(d.cloneContents());
        var l = b.createElement("div");
        l.appendChild(e), e.appendChild(b.createElement("br")), a.insertHTML(l.innerHTML, !0)
    }
    a.saveCurrentState()
}, ZohoDeskEditor.prototype.htmlView = function() {
    "use strict";
    var a = this,
        b = document,
        c = b.getElementById("ze_htmlview"),
        d, e, f, g, h = a.getContent(),
        i, j, k, l, m, n, o;
    ZohoDeskEditor.showOverlay(), j = function() {
        c.style.display = "none", ZohoDeskEditor.hideOverlay(), a.win.focus(), b.removeEventListener("keydown", k, !0)
    }, k = function(b) {
        b.keyCode === 27 && (a._stopEvent(b), j())
    }, l = function() {
        d = c.getElementsByTagName("textarea")[0], e = c.getElementsByTagName("iframe")[0], i = c.getElementsByTagName("input");
        var a = c.getElementsByTagName("span");
        f = a[0], g = a[1], n = c.getElementsByTagName("i")[0]
    }, m = function() {
        f.className = "ze_edit_sel", g.className = "ze_edit", e.style.display = "none", d.style.display = ""
    }, c ? (l(), d.value = h, m(), c.style.display = "") : function() {
        var a = ZohoDeskEditor.i18n,
            d, e;
        d = "<div class='zdeskEditor_PUheader'>", d += a("Edit HTML") + "<i class='zei-close'></i></div>", d += "<div class='zdeskEditor_PUbody'><div class='ze_menu_tab'><span class='ze_edit_sel'>" + a("HTML") + "</span>", d += "<span class='ze_edit'>" + a("Preview") + "</span></div>", d += "<textarea class='ze_ed_txtarea '>" + h + "</textarea>", d += "<iframe class='ze_ed_ifr' style='display:none;'></iframe></div>", d += "<div class='zdeskEditor_PUbtm'><input type='submit' class='blue-btn' value='" + a("Insert") + "'/>", d += "<input type='submit' class='btn' value='" + a("Cancel") + "'/>", e = b.createElement("div"), e.className = "zdeskEditor_popup", e.innerHTML = d, e.id = "ze_htmlview", document.body.appendChild(e), c = e, l()
    }(), ZohoDeskEditor.setPosition(c, a.outerdiv), d.focus();
    try {
        o = new XMLHttpRequest, o.open("POST", "/support/ze/formatTag", !0), o.onreadystatechange = function() {
            if (o.readyState === 4 && o.status === 200) {
                var a = o.responseText;
                a && (a = JSON.parse(a), d.value = a.content || h)
            }
        }, o.setRequestHeader("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8"), o.send(encodeURI("&content=" + encodeURIComponent(h) + "&" + ZohoDeskEditor.getCSRFParamName() + "=" + ZohoDeskEditor.getCSRFCookie(a)))
    } catch (p) {}
    f.onmousedown = function() {
        return m(), d.focus(), !1
    }, g.onmousedown = function() {
        f.className = "ze_edit", g.className = "ze_edit_sel", d.style.display = "none";
        var b = a.squireInstance,
            c = NewDOMPurify || window.NewDOMPurify || editorModule && editorModule.exports,
            h = c.sanitize(d.value, {
                ADD_ATTR: ["contenteditable"]
            }),
            i = e.contentWindow.document,
            j, k, l, m = function() {
                var a = i.getElementsByTagName("head")[0],
                    b = i.createElement("link");
                b.type = "text/css", b.rel = "stylesheet", b.href = ZohoDeskEditor_Init.cssPath + "/ZohoDeskEditor.min.css", a || (i.body.parentNode.insertBefore(i.createElement("head"), i.body), a = i.getElementsByTagName("head")[0]), a && a.appendChild(b)
            };
        return i.open(), i.write(h), m(), i.close(), e.style.display = "", e.contentWindow.focus(), !1
    }, n.onclick = i[1].onclick = function(b) {
        a._stopEvent(b), j()
    }, i[0].onclick = function(b) {
        var c = a.squireInstance,
            e = NewDOMPurify || window.NewDOMPurify || editorModule && editorModule.exports;
        a._stopEvent(b);
        var f = e.sanitize(d.value, {
            ADD_ATTR: ["contenteditable"]
        });
        a.setContent(f), a.styletext && a.insertTOC(), c.addTextLinks(a.doc.body, a.doc.body, c), j()
    }, b.addEventListener("keydown", k, !0)
};